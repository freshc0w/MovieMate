(()=>{"use strict";const e="720d2150cf09bfa61e28a5042cd7468f",t="720d2150cf09bfa61e28a5042cd7468f";async function n(e){try{const n=await fetch(`https://api.themoviedb.org/3/movie/${e}?api_key=${t}\n\t\t\t&language=en-US`,{mode:"cors"}),{original_title:a,overview:o,tagline:r,popularity:i,vote_average:s,vote_count:c,genres:d,video:l,runtime:p,poster_path:u,backdrop_path:m,release_date:h}=await n.json();return{mName:a,summary:o,tagline:r,popularity:i,vote_average:s,vote_count:c,genres:d.map((e=>e.name)),video:l,runtime:p,poster_path:u,backdrop_path:m,release_date:h}}catch(e){console.error(`Failed to fetch movie details ${e.message}`)}}async function a(e){try{const n=await fetch(`https://api.themoviedb.org/3/movie/${e}/recommendations\n\t\t\t?api_key=${t}&language=en-US&page=1`,{mode:"cors"});if(!n.ok)throw new Error("Failed to fetch movie recommendations from API.");return(await n.json()).results.slice(0,5).map((e=>({mName:e.original_title,id:e.id,poster_path:e.poster_path,backdrop_path:e.backdrop_path,release_date:e.release_date,vote_count:e.vote_count,vote_average:e.vote_average})))}catch(e){console.error(`Failed to fetch movie recommendations: ${e.message}`)}}async function o(e){const n={};try{const o=await fetch(`https://api.themoviedb.org/3/movie/${e}/watch/providers\n\t\t\t?api_key=${t}`,{mode:"cors"}),r=await o.json();for(const e in r.results){const t=(a=e,new Intl.DisplayNames(["en"],{type:"region"}).of(a));n[t]={stream:[],rent:[],buy:[],countryCode:e};const o=(e,t)=>{e&&e.forEach((e=>{const n={provider_name:e.provider_name,provider_logo_path:e.logo_path};t.push(n)}))};o(r.results[e].flatrate,n[t].stream),o(r.results[e].rent,n[t].rent),o(r.results[e].buy,n[t].buy)}return n}catch(e){console.erroror(`Failed to fetch movie providers: ${e.message}`)}var a}async function r(e){try{const a=await fetch(`https://api.themoviedb.org/3/movie/${e}/videos?api_key=\n\t\t\t${t}&mode=cors`);if(!a.ok)throw new Error("Failed to fetch movie trailers from API.");const o=(await a.json()).results.filter((e=>"Trailer"===e.type));if(0===o.length)return;const r=o.find((e=>!0===e.official))||o[0];return{tName:r.name,key:r.key,site:r.site,type:r.type,lang:(n=r.iso_639_1,new Intl.DisplayNames(["en"],{type:"language"}).of(n))}}catch(e){console.error(`Failed to fetch movie trailers: ${e.message}`)}var n}async function i(e){try{let n=[];const a=await fetch(`https://api.themoviedb.org/3/movie/${e}/reviews?api_key=\n\t\t\t${t}&language=en-US&page=1`,{mode:"cors"}),o=await a.json();return 0!==o.results.length&&(o.results.forEach((e=>{n.push({author:e.author,rating:e.author_details?.rating,pic_path:e.author_details?.avatar_path,content:e.content,url:e.url,last_updated:e.updated_at})})),n.slice(0,5))}catch(e){console.error(`Fail to fetch movie reviews: ${e.message}`)}}const s="720d2150cf09bfa61e28a5042cd7468f";async function c(e){try{const t=await fetch(`https://api.themoviedb.org/3/tv/${e}?api_key=${s}\n\t\t\t&language=en-US`,{mode:"cors"});if(!t.ok)throw new Error("Failed to fetch TV details from API.");const n=await t.json(),a=n.genres.reduce(((e,t)=>[...e,t.name]),[]);return{tName:n.original_name,tagline:n.tagline,language:n.original_language,summary:n.overview,episode_run_time:n.episode_run_time[0],origin_country:n.origin_country,vote_average:n.vote_average,vote_count:n.vote_count,status:n.status,seasons:n.seasons,number_of_seasons:n.number_of_seasons,first_air_date:n.first_air_date,last_air_date:n.last_air_date,backdrop_path:n.backdrop_path,poster_path:n.poster_path,popularity:n.popularity,genres:a}}catch(e){console.error(`Failed to fetch relevant information for TV SHOW: ${e.message}`)}}async function d(e){try{const t=await fetch(`https://api.themoviedb.org/3/tv/${e}/recommendations?api_key=${s}&language=en-US&page=1`,{mode:"cors"});if(!t.ok)throw new Error("Failed to fetch TV recommendations from API.");const n=(await t.json()).results?.slice(0,5).reduce(((e,t)=>(e[t.original_name]={tName:t.original_name,id:t.id,first_air_date:t.first_air_date,poster_path:t.poster_path,backdrop_path:t.backdrop_path,vote_average:t.vote_average,vote_count:t.vote_count},e)),{});return n||{}}catch(e){console.error(`Failed to fetch TV recommendations: ${e.message}`)}}async function l(e){const t={};try{const a=await fetch(`https://api.themoviedb.org/3/tv/${e}/watch/providers?api_key=${s}`,{mode:"cors"});if(!a.ok)throw new Error("Failed to fetch TV show providers from API.");const o=await a.json();for(const e in o.results){const a=(n=e,new Intl.DisplayNames(["en"],{type:"region"}).of(n));t[a]={stream:[],rent:[],buy:[],countryCode:e};const r=(e,t)=>{e&&e.forEach((e=>{const n={provider_name:e.provider_name,provider_logo_path:e.logo_path};t.push(n)}))};r(o.results[e].flatrate,t[a].stream),r(o.results[e].rent,t[a].rent),r(o.results[e].buy,t[a].buy)}return t}catch(e){console.error(`Failed to fetch TV providers: ${e.message}`)}var n}async function p(e){try{const n=await fetch(`https://api.themoviedb.org/3/tv/${e}/videos?api_key=${s}`,{mode:"cors"});if(!n.ok)throw new Error("Failed to fetch TV trailer from API.");const a=(await n.json()).results.filter((e=>"Trailer"===e.type));if(0===a.length)return;const o=a.find((e=>!0===e.official))||a[0];return{tName:o.name,key:o.key,site:o.site,type:o.type,lang:(t=o.iso_639_1,new Intl.DisplayNames(["en"],{type:"language"}).of(t))}}catch(e){console.error(`Failed to fetch TV trailer: ${e.message}`)}var t}async function u(e){try{const t=await fetch(`https://api.themoviedb.org/3/tv/${e}/reviews?api_key=\n\t\t\t${s}&language=en-US&page=1`,{mode:"cors"});if(!t.ok)throw new Error("Failed to fetch TV reviews from API.");const n=await t.json();return 0!==n.results.length&&n.results.map((e=>({author:e.author,rating:e.author_details?.rating,pic_path:e.author_details?.avatar_path,content:e.content,url:e.url,last_updated:e.updated_at}))).slice(0,5)}catch(e){console.error(`Failed to fetch TV reviews: ${e.message}`)}}const m=async(e,t)=>{const s=document.createElement("section"),m=await b(e,n,c),g=await b(e,a,d),y=await b(e,o,l),v=await b(e,r,p),_=await b(e,i,u);function w(e){e&&s.appendChild(e)}function C(e,t){const n=document.createElement(e);return n.classList.add(t),n}async function b(e,n,a){return"movie"===t?await n(e):await a(e)}s.classList.add("section-container");const E=e=>{const t=document.createElement("div");t.classList.add("intro"),t.appendChild(function(){const e=C("h1","title");return e.textContent=m.mName?m.mName:m.tName,e}()),t.appendChild(function(){const e=C("em","tagline");return e.textContent=`"${m.tagline}"`,e}());const n=function(e=""){const t=document.createElement("img"),n="https://image.tmdb.org/t/p",a=m.poster_path||m.backdrop_path;return a?(t.classList.add("poster"),t.src=e?`${n}/w${e}/${a}`:`${n}/original/${a}`,t.alt="Movie picture poster",t.setAttribute("loading","lazy"),t):null}(e);return n&&t.appendChild(n),t},$=e=>{const t=C("div","rec-container"),n=C("img","rec-poster"),a=C("div","rec-info");n.src=`https://image.tmdb.org/t/p/w300/${e.poster_path}`,t.appendChild(n),function(e){if(e){const t=C("p","rec-name"),n=C("p","rec-date"),a=C("p","rec-vote-count"),o=C("p","rec-vote-avg");return t.textContent=e.tName?`Name: ${e.tName}`:`Name: ${e.mName}`,n.textContent=e.first_air_date?`First Air Date: ${e.first_air_date}`:`Release Date: ${e.release_date}`,a.textContent=`Vote Count: ${e.vote_count}`,o.textContent=`Vote Avg: ${e.vote_average}`,[t,n,a,o]}}(e).forEach((e=>a.appendChild(e)));const o=C("a","rec-link"),r=e.tName?"TV Show":"Movie";return o.textContent=`Search for this ${r} -> `,o.addEventListener("click",(async t=>{t.preventDefault(),f(),e.tName?await h(e.tName):await h(e.mName)})),a.appendChild(o),t.appendChild(a),t};return{section:s,addToSection:w,drawAll:function(){w(E())},drawIntro:E,drawSubInfos:()=>{const e=C("div","subinfo-container");let t,n;m.release_date?(t=o("Release Date:",m.release_date.split("-").reverse().join("/")),n=""):m.first_air_date?(t=o("First Aired: ",m.first_air_date.split("-").reverse().join("/")),n=o("Last Aired: ",m.last_air_date.split("-").reverse().join("/"))):t="";let a=m.runtime?function(e){const t=e/60,n=Math.floor(t),a=60*(t-n);return`${n}h ${Math.round(a)}min`}(m.runtime):"";function o(e,t){if(!t)return null;const n=C("div","sub-info"),a=C("span","category-name"),o=C("span","category-info");return a.textContent=e,o.textContent=t,[a,o].forEach((e=>n.appendChild(e))),n}return[t,n,o("Show status:",m.status),o("Runtime: ",a),o("Genres: ",m.genres.join(", ")),o("Number of seasons: ",m.number_of_seasons),o("Est Avg Episode Runtime: ",m.episode_run_time),o("Country of Origin: ",m.origin_country),o("Vote Average: ",m.vote_average),o("Vote Count: ",m.vote_count),o("Popularity: ",m.popularity)].forEach((t=>t?e.appendChild(t):"")),e},drawSummaryHeading:()=>{const e=document.createElement("h2");return e.textContent="Synopsis: ",e},drawSummary:()=>{const e=C("p","summary");return e.textContent=m.summary,e},drawProviders:()=>{let e;const t=C("div","provider-container"),n=C("button","country-btn"),a=C("div","house-provider-container");if([n,a].forEach((e=>{t.appendChild(e)})),Object.keys(y).length)if(e=!0,Object.keys(y).includes("Australia")){const e=C("img","country-flag");e.setAttribute("crossorigin","anonymous"),e.src="https://countryflagsapi.com/png/Australia",e.alt="Australia flag",e.classList.add("btn-country-flag"),r("Australia"),n.textContent="Australia",n.appendChild(e)}else{const e=Object.keys(y)[0];try{const t=C("img","country-flag");t.setAttribute("crossorigin","anonymous"),t.src=`https://countryflagsapi.com/png/${e}`,t.alt=`${e} flag`,t.classList.add("btn-country-flag"),n.appendChild(t)}catch(e){console.log(e)}r(e),n.textContent=`${e}`}else{e=!1,n.textContent="No countries offer this tv/movie at the moment.",n.classList.add("lost-providers");const t=C("img","lost-gif");t.src="./img/lost-gif.gif",t.alt="Prover cannot be found picture.",a.style.display="flex",a.style.justifyContent="center",a.appendChild(t)}const o=C("i","fas");return o.classList.add("fa-angle-down"),n.appendChild(o),n.addEventListener("click",(t=>{t.preventDefault(),e&&(function(e){const t=Object.keys(y);let n,a={};t.forEach((t=>{a[t]=y[t].countryCode,e===t&&(n=y[t].countryCode)}));const o=C("form","modal-country-container"),r=C("div","modal-header"),i=C("div","modal-body"),s=C("div","modal-current-country"),c=C("input","modal-input-search"),d=C("ul","modal-list-countries"),l=C("button","modal-close-btn");function p(e,t){const n=C("img","country-flag");return n.setAttribute("crossorigin","anonymous"),n.src=`https://countryflagsapi.com/png/${e}`,n.alt=`${t} flag`,n}function u(){let e,t,n,a,o,r,i;for(e=document.getElementById("modal-input-search"),t=e.value.toUpperCase(),n=document.getElementById("countries-list"),a=n.getElementsByTagName("li"),r=0;r<a.length;r++)o=a[r].getElementsByTagName("a")[0],i=o.textContent||o.innerText,i.toUpperCase().indexOf(t)>-1?a[r].style.display="":a[r].style.display="none"}(()=>{const t=document.createElement("h2");t.textContent="Countries";const a=document.createElement("h3"),o=document.createElement("label"),i={id:"modal-input-search",type:"search",placeholder:"🔍 Search for countries...",title:"Type in a country name",role:"search"};for(let e in i)c.setAttribute(e,i[e]);c.addEventListener("keyup",u),c.addEventListener("submit",(e=>{e.preventDefault()}));const d=p(n,e);a.textContent=e,s.appendChild(d),s.appendChild(a),o.htmlFor=`${c.id}`,[t,s,o,c].forEach((e=>{r.appendChild(e)}))})(),(()=>{d.id="countries-list";for(let e in a){let t=a[e];const n=C("li","country-container"),o=p(t,e),r=C("a","country-name");r.textContent=e,r.setAttribute("href","#"),[o,r].forEach((e=>{n.appendChild(e)})),d.appendChild(n)}[d].forEach((e=>{i.appendChild(e)}))})(),(e=>{const t=C("i","fa");t.classList.add("fa-close"),l.appendChild(t),e()})((()=>{l.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".modal-country-container");document.querySelector(".face-mask").style.display="none",setTimeout((function(){t.style.transform="translateY(-125%)"}),100),setTimeout((function(){t.style.opacity=0,t.style.visibility="hidden",t.remove()}),750)}))})),[r,i,l].forEach((e=>o.appendChild(e))),setTimeout((function(){o.style.visibility="visible",o.style.opacity=1,o.style.transform="translateY(0%)"}),100),document.querySelector("body").append(o),document.querySelector(".face-mask").style.display="block"}(n.textContent),function(e){let t,n,a,o,r;for(t=document.getElementById("countries-list"),n=t.getElementsByTagName("li"),a=0;a<n.length;a++)if(o=n[a].getElementsByTagName("a")[0],r=o.textContent||o.innerText,r===e){n[a].style.backgroundColor="rgba(25, 150, 150, 0.5)",n[a].style.transform="scale(1.025)";const e=C("i","fa");e.classList.add("fa-check"),n[a].append(e)}}(n.textContent),document.querySelectorAll(".country-container").forEach((e=>e.addEventListener("click",(t=>{if(t.preventDefault(),e.lastChild.textContent){const t=e.lastChild.textContent;a.innerHTML="",r(t)}document.querySelector(".modal-country-container").remove(),document.querySelector(".face-mask").style.display="none"})))))})),t;function r(e="Australia"){n.textContent=e;try{const t=C("img","country-flag");t.setAttribute("crossorigin","anonymous"),t.src=`https://countryflagsapi.com/png/${e}`,t.alt=`${e} flag`,t.classList.add("btn-country-flag"),n.appendChild(t)}catch(e){console.log(e)}const t=C("i","fas");t.classList.add("fa-angle-down"),n.appendChild(t);const o=y[e].stream,r=y[e].buy,i=y[e].rent,s=["Stream at:","Purchase at:","Rent at:"];let c=0;[o,r,i].forEach((e=>{const t=C("div","service-container"),n=C("div","service-name"),o=C("h2","service-name-bold"),r=C("div","provider-service-container");e.forEach((e=>{const t=C("div","provider-service"),n=C("img","provider-img"),a=C("span","provider-name");e.provider_logo_path&&(n.src=`https://image.tmdb.org/t/p/original/${e.provider_logo_path}`,n.alt=`${e.provider_name} picture.`,n.setAttribute("loading","lazy"),a.textContent=e.provider_name),[n,a].forEach((e=>{t.appendChild(e)})),r.appendChild(t)})),e.length&&(o.textContent=`${s[c]}`,n.appendChild(o)),c++,t.appendChild(n),t.appendChild(r),a.appendChild(t)}))}},drawReviews:()=>{if(!_)return;const e=C("div","review-container"),t=C("h2","review-title");return t.textContent="Reviews:",e.appendChild(t),_.forEach((t=>((e,t)=>{function n(t,n,a,o){const r=C(a,o);t&&(r.textContent=t),t===e.rating&&(r.textContent=e.rating?`${t}/10`:"Rating not provided.."),n.appendChild(r)}t.appendChild((()=>{const t=C("div","review-heading");if(e.pic_path){const n=C("img","author-pic");"http"!==e.pic_path.slice(1,5)?n.src=`https://image.tmdb.org/t/p/w300/${e.pic_path}`:n.src=e.pic_path.slice(1),n.alt=`${e.author} profile picture.`,t.appendChild(n)}return n(e.author,t,"h3","review-author"),n(e.rating,t,"span","review-rating"),t})()),t.appendChild((()=>{const t=C("p","review-content");return t.textContent=`"${e.content}"`,t})()),t.appendChild((()=>{const t=C("div","review-footer"),n=C("a","review-link"),a=C("span","review-updated");var o;return n.setAttribute("href",`${e.url}`),n.setAttribute("target","_blank"),n.textContent="Click for review link",a.textContent=`Last updated: ${o=e.last_updated,(o=o.split("-"))[2]=o[2].slice(0,2)+"/",o[2].concat(o.slice(0,2).reverse().join("/"))}`,t.appendChild(n),t.appendChild(a),t})())})(t,e))),e},drawTrailer:()=>{const e=C("div","trailer-container"),t=C("div","trailer-heading");if(v){(function(){const e=C("h2","trailer-name"),t=C("h3","trailer-lang");return e.textContent=`${v.tName}`,t.textContent=`Language: ${v.lang}`,[e,t]})().forEach((e=>t.appendChild(e))),e.appendChild(t);const n=C("div","video-wrapper");n.appendChild(function(e,t){const n=C("iframe","trailer-video"),a={loading:"lazy",width:"560",height:"315",src:`https://youtube.com/embed/${e}`,title:`${t} video player`,frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted media; gyroscope; picture-in-picture; web-share"};for(let e in a)n.setAttribute(e,a[e]),n.setAttribute("allowfullscreen",!0);return n}(v.key,v.site)),e.appendChild(n)}return e},drawRecs:()=>{const e=C("div","recs-container");if(0===Object.keys(g).length){const t=C("h4","no-review-msg");return t.textContent="No recommendations found.",e.appendChild(t),e.style="display: flex; justify-content: center;",e}for(let t in g)e.appendChild($(g[t]));return e}}};async function h(t){const n=await async function(t){const n=function(e){return e.split(" ").join("+")}(t);try{const a=await fetch(`https://api.themoviedb.org/3/search/multi?api_key=${e}\n\t\t\t&language=en-US&query=${n}&page=1`,{mode:"cors"}),o=await a.json();let r=o.results.reduce(((e,t)=>(e[t.id]=t.media_type,e)),{});return o.results.sort(((e,t)=>t.popularity-e.popularity)).length?r:void alert(`No results found for "${t}".\nPlease check your spelling.`)}catch(e){throw e}}(t),a=document.querySelector(".main-container");document.querySelector(".loader").style.visibility="visible";let o=[];for(let e in n)o.push([e,n[e]]);const r=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&e.target.classList.add("show")}))}));o.forEach((async e=>{await async function(e,t){const n=await m(e,t),o=document.createElement("div");o.classList.add("intro-sub-info"),o.appendChild(n.drawIntro("300")),o.appendChild(n.drawSubInfos());const r=document.createElement("div");r.classList.add("synopsis-watch-providers"),r.appendChild(n.drawSummaryHeading()),r.appendChild(n.drawSummary()),r.appendChild(n.drawProviders());const i=document.createElement("h2");i.classList.add("rec-heading"),i.textContent="RECOMMENDATIONS:",n.addToSection(o),n.addToSection(r),n.addToSection(n.drawReviews()),n.addToSection(n.drawTrailer()),n.addToSection(i),n.addToSection(n.drawRecs()),a.appendChild(n.section)}(e[0],e[1]).then((()=>{document.querySelector(".loader").style.visibility="hidden"})),document.getElementById("check-animation").checked&&[...document.getElementsByTagName("div")].forEach((e=>{e.classList.add("hidden"),r.observe(e)}))})),document.getElementById("input-search").value=t.split("+").join(" ")}function f(){const e=document.querySelector(".main-container");document.querySelector(".loader"),[...e.getElementsByTagName("section")].forEach((e=>e.remove()))}const g=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&e.target.classList.add("show")}))}));(async function(){document.querySelector(".search-query").addEventListener("click",(async e=>{e.preventDefault();const t=document.getElementById("input-search").value.split(" ").join("+");t?(document.getElementById("title-page")&&document.getElementById("title-page").remove(),document.querySelector(".intro-container2")&&document.querySelector(".intro-container2").remove(),f(),await h(t)):alert("Please enter a valid movie/tv show")}))})(),function(){const e=document.getElementById("check-animation");e.addEventListener("click",(()=>{const t=document.querySelectorAll("div");e.checked?t.forEach((e=>{e.classList.add("hidden"),g.observe(e)})):t.forEach((e=>{e.classList.remove("hidden"),g.disconnect()}))}))}(),h("Game Of Thrones")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QjBFLEVBQUs5RixxQkFBcUIsWUFDN0I1SyxTQUFRMlIsR0FBUUEsRUFBS3RGLFVBQ3BDLENDM0VBLE1BQU11RSxFQUFXLElBQUlDLHNCQUFzQkMsSUFDMUNBLEVBQVE5USxTQUFTK1EsSUFDWkEsRUFBTUMsZ0JBQ1RELEVBQU1FLE9BQU96TSxVQUFVQyxJQUFJLE9BRzVCLEdBQ0MsS0NQWTNILGlCQUNJNEcsU0FBU3NJLGNBQWMsaUJBQy9CeEYsaUJBQWlCLFNBQVMxSixNQUFPMkosSUFDMUNBLEVBQUVDLGlCQUNGLE1BQU11SixFQUNMdk0sU0FBUytHLGVBQWUsZ0JBQWdCQyxNQXVCOUIxRCxNQUFNLEtBQUtFLEtBQUssS0FyQnRCK0ksR0FNTHZNLFNBQVMrRyxlQUFlLGVBQ3JCL0csU0FBUytHLGVBQWUsY0FBYzRCLFNBR3pDM0ksU0FBU3NJLGNBQWMsc0JBQ3BCdEksU0FBU3NJLGNBQWMscUJBQXFCSyxTQUcvQ3FGLFVBQ00zQixFQUFhRSxJQWRsQk8sTUFBTSxxQ0Fja0IsR0FHM0IsRUNuQklvQixHRklXLFdBQ2QsTUFBTUMsRUFBaUJuTyxTQUFTK0csZUFBZSxtQkFDL0NvSCxFQUFlckwsaUJBQWlCLFNBQVMsS0FDeEMsTUFBTXNMLEVBQVdwTyxTQUFTa0osaUJBQWlCLE9BQ3ZDaUYsRUFBZU4sUUFDbEJPLEVBQVM5UixTQUFTd1IsSUFDakJBLEVBQUdoTixVQUFVQyxJQUFJLFVBQ2pCbU0sRUFBU2EsUUFBUUQsRUFBRyxJQUdyQk0sRUFBUzlSLFNBQVN3UixJQUNqQkEsRUFBR2hOLFVBQVU2SCxPQUFPLFVBQ3BCdUUsRUFBU21CLFlBQVksR0FFdkIsR0FFRixDRW5CSUMsR0FKSmpDLEVBQWEsa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb3ZpZW1hdGUvLi9zcmMvanMvYXBpRnVuY3Rpb25zL2ZldGNoSWQuanMiLCJ3ZWJwYWNrOi8vbW92aWVtYXRlLy4vc3JjL2pzL2FwaUZ1bmN0aW9ucy9mZXRjaE1vdmllSW5mby5qcyIsIndlYnBhY2s6Ly9tb3ZpZW1hdGUvLi9zcmMvanMvYXBpRnVuY3Rpb25zL2ZldGNoVHZJbmZvLmpzIiwid2VicGFjazovL21vdmllbWF0ZS8uL3NyYy9qcy9ET01GdW5jdGlvbnMvZHJhd1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbW92aWVtYXRlLy4vc3JjL2pzL0RPTUZ1bmN0aW9ucy9kcmF3U2VjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vbW92aWVtYXRlLy4vc3JjL2pzL1VJL2NoZWNrQW5pbWF0aW9uLmpzIiwid2VicGFjazovL21vdmllbWF0ZS8uL3NyYy9qcy9VSS9zdWJtaXRTZWFyY2guanMiLCJ3ZWJwYWNrOi8vbW92aWVtYXRlLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFQSV9LRVkgPSBcIjcyMGQyMTUwY2YwOWJmYTYxZTI4YTUwNDJjZDc0NjhmXCI7XG4vKipcbiAqIEZldGNoZXMgdGhlIGZpcnN0IHBhZ2Ugb2YgdGhlIG1vdmllL3Nob3cgaWRzIGFuZCByZXR1cm5zIGl0IGFzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgbW92aWUvdHYgc2hvdyBpZCBhbmQgaXQncyBtZWRpYSB0eXBlIGFzIGtleS12YWx1ZSBwYWlycy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBcdG5hbWVcdFRoZSBzcGVjaWZpYyBuYW1lIG9mIHRoZSBtb3ZpZS9UViBzaG93LlxuICogQHJldHVybiB7T2JqZWN0fVx0XHRcdFRoZSBsaXN0IG9mIGlkcyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSBtZWRpYSB0eXBlIGFzXG4gKiBcdFx0XHRcdFx0XHRcdGtleS12YWx1ZSBwYWlycy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hJZHMobmFtZSkge1xuXHRjb25zdCBxdWVyeSA9IGludGVycHJldFRvUXVlcnkobmFtZSk7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcblx0XHRcdGBodHRwczovL2FwaS50aGVtb3ZpZWRiLm9yZy8zL3NlYXJjaC9tdWx0aT9hcGlfa2V5PSR7QVBJX0tFWX1cblx0XHRcdCZsYW5ndWFnZT1lbi1VUyZxdWVyeT0ke3F1ZXJ5fSZwYWdlPTFgLFxuXHRcdFx0eyBtb2RlOiBcImNvcnNcIiB9XG5cdFx0KTtcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRcdGxldCBpZHMgPSBkYXRhLnJlc3VsdHMucmVkdWNlKChhY2MsIHJlc3VsdCkgPT4ge1xuXHRcdFx0YWNjW3Jlc3VsdC5pZF0gPSByZXN1bHQubWVkaWFfdHlwZTtcblx0XHRcdHJldHVybiBhY2M7XG5cdFx0fSwge30pO1xuXG5cdFx0Ly8gU29ydCBtb3ZpZS9zaG93IGJ5IHBvcHVsYXJpdHkuXG5cdFx0bGV0IHJlc3VsdCA9IGRhdGEucmVzdWx0cy5zb3J0KFxuXHRcdFx0KHAxLCBwMikgPT4gcDIucG9wdWxhcml0eSAtIHAxLnBvcHVsYXJpdHlcblx0XHQpO1xuXG5cdFx0aWYgKHJlc3VsdC5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBpZHM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFsZXJ0KFxuXHRcdFx0XHRgTm8gcmVzdWx0cyBmb3VuZCBmb3IgXCIke25hbWV9XCIuXFxuUGxlYXNlIGNoZWNrIHlvdXIgc3BlbGxpbmcuYFxuXHRcdFx0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHRocm93IGVycjtcblx0fVxufVxuXG5mdW5jdGlvbiBpbnRlcnByZXRUb1F1ZXJ5KG5hbWUpIHtcblx0cmV0dXJuIG5hbWUuc3BsaXQoXCIgXCIpLmpvaW4oXCIrXCIpO1xufVxuXG5leHBvcnQgeyBmZXRjaElkcyB9O1xuIiwiY29uc3QgQVBJX0tFWSA9IFwiNzIwZDIxNTBjZjA5YmZhNjFlMjhhNTA0MmNkNzQ2OGZcIjtcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBkZXRhaWxzIG9mIGEgbW92aWUgYW5kIHJldHVybiBvbmx5IHRoZSBtb3N0XG4gKiByZWxldmFudCBpbmZvcm1hdGlvbi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBtb3ZpZV9pZCBJZGVudGlmaWVzIHRoZSBtb3ZpZSBhcyBhbiBpbnRlZ2VyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaE1vdmllRGV0YWlscyhtb3ZpZV9pZCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG5cdFx0XHRgaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy9tb3ZpZS8ke21vdmllX2lkfT9hcGlfa2V5PSR7QVBJX0tFWX1cblx0XHRcdCZsYW5ndWFnZT1lbi1VU2AsXG5cdFx0XHR7IG1vZGU6IFwiY29yc1wiIH1cblx0XHQpO1xuXHRcdGNvbnN0IHtcblx0XHRcdG9yaWdpbmFsX3RpdGxlLFxuXHRcdFx0b3ZlcnZpZXcsXG5cdFx0XHR0YWdsaW5lLFxuXHRcdFx0cG9wdWxhcml0eSxcblx0XHRcdHZvdGVfYXZlcmFnZSxcblx0XHRcdHZvdGVfY291bnQsXG5cdFx0XHRnZW5yZXMsXG5cdFx0XHR2aWRlbyxcblx0XHRcdHJ1bnRpbWUsXG5cdFx0XHRwb3N0ZXJfcGF0aCxcblx0XHRcdGJhY2tkcm9wX3BhdGgsXG5cdFx0XHRyZWxlYXNlX2RhdGUsXG5cdFx0fSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuXHRcdGNvbnN0IGdlbnJlTmFtZXMgPSBnZW5yZXMubWFwKChnZW5yZSkgPT4gZ2VucmUubmFtZSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bU5hbWU6IG9yaWdpbmFsX3RpdGxlLFxuXHRcdFx0c3VtbWFyeTogb3ZlcnZpZXcsXG5cdFx0XHR0YWdsaW5lLFxuXHRcdFx0cG9wdWxhcml0eSxcblx0XHRcdHZvdGVfYXZlcmFnZSxcblx0XHRcdHZvdGVfY291bnQsXG5cdFx0XHRnZW5yZXM6IGdlbnJlTmFtZXMsXG5cdFx0XHR2aWRlbyxcblx0XHRcdHJ1bnRpbWUsXG5cdFx0XHRwb3N0ZXJfcGF0aCxcblx0XHRcdGJhY2tkcm9wX3BhdGgsXG5cdFx0XHRyZWxlYXNlX2RhdGUsXG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTcXVhc2hlZFxuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmZXRjaCBtb3ZpZSBkZXRhaWxzICR7ZXJyb3IubWVzc2FnZX1gKTtcblx0fVxufVxuXG4vKipcbiAqIFJldXJucyBtb3ZpZSByZWNvbW1lbmRhdGlvbnMgYXMgYW4gb2JqZWN0IHdpdGggaXRzIHJlbGV2YW50IGluZm9ybWF0aW9uLlxuICogTWF4aW11bSA1IG1vdmllcyBjYW4gYmUgcmVjb21tZW5kZWQgYW5kIHRoZSAuXG4gKiBAcGFyYW0ge051bWJlcn0gbW92aWVfaWQgSWRlbnRpZmllcyB0aGUgbW92aWUgYXMgYW4gSW50ZWdlci5cbiAqIEByZXR1cm5zIHtPYmplY3R9XHRcdEFuIG9iamVjdCB0aGF0IGhhcyB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gd2l0aFxuICogXHRcdFx0XHRcdFx0XHRpdCdzIGltYWdlcywgdGl0bGUsIGlkIGFuZCByZWxldmFudCB2b3RlIGluZm8uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoTW92aWVSZWNjb3MobW92aWVfaWQpIHtcblx0dHJ5IHtcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuXHRcdFx0YGh0dHBzOi8vYXBpLnRoZW1vdmllZGIub3JnLzMvbW92aWUvJHttb3ZpZV9pZH0vcmVjb21tZW5kYXRpb25zXG5cdFx0XHQ/YXBpX2tleT0ke0FQSV9LRVl9Jmxhbmd1YWdlPWVuLVVTJnBhZ2U9MWAsXG5cdFx0XHR7IG1vZGU6IFwiY29yc1wiIH1cblx0XHQpO1xuXG5cdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIG1vdmllIHJlY29tbWVuZGF0aW9ucyBmcm9tIEFQSS5cIik7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuXHRcdC8vIE9ubHkgcmV0cmlldmUgdGhlIGluZm8gb24gdGhlIGZpcnN0IDUgbW92aWUgcmVjb21tZW5kYXRpb25zLlxuXHRcdGNvbnN0IHJlY2NvcyA9IGRhdGEucmVzdWx0cy5zbGljZSgwLCA1KS5tYXAoKG1vdmllKSA9PiAoe1xuXHRcdFx0bU5hbWU6IG1vdmllLm9yaWdpbmFsX3RpdGxlLFxuXHRcdFx0aWQ6IG1vdmllLmlkLFxuXHRcdFx0cG9zdGVyX3BhdGg6IG1vdmllLnBvc3Rlcl9wYXRoLFxuXHRcdFx0YmFja2Ryb3BfcGF0aDogbW92aWUuYmFja2Ryb3BfcGF0aCxcblx0XHRcdHJlbGVhc2VfZGF0ZTogbW92aWUucmVsZWFzZV9kYXRlLFxuXHRcdFx0dm90ZV9jb3VudDogbW92aWUudm90ZV9jb3VudCxcblx0XHRcdHZvdGVfYXZlcmFnZTogbW92aWUudm90ZV9hdmVyYWdlLFxuXHRcdH0pKTtcblxuXHRcdHJldHVybiByZWNjb3M7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdGBGYWlsZWQgdG8gZmV0Y2ggbW92aWUgcmVjb21tZW5kYXRpb25zOiAke2Vycm9yLm1lc3NhZ2V9YFxuXHRcdCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiAoc3RyZWFtaW5nLCBwdXJjaGFzZSBhbmQvb3IgcmVudCkgb2YgdGhlXG4gKiBtb3ZpZSBwcm92aWRlcnMuXG4gKiBAcGFyYW0ge051bWJlcn0gbW92aWVfaWQgSWRlbnRpZmllcyB0aGUgbW92aWUgYXMgYW4gSW50ZWdlclxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hNb3ZpZVByb3ZpZGVycyhtb3ZpZV9pZCkge1xuXHRjb25zdCBwcm92aWRlcnNCeUNvdW50cnkgPSB7fTtcblx0dHJ5IHtcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuXHRcdFx0YGh0dHBzOi8vYXBpLnRoZW1vdmllZGIub3JnLzMvbW92aWUvJHttb3ZpZV9pZH0vd2F0Y2gvcHJvdmlkZXJzXG5cdFx0XHQ/YXBpX2tleT0ke0FQSV9LRVl9YCxcblx0XHRcdHsgbW9kZTogXCJjb3JzXCIgfVxuXHRcdCk7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuXHRcdGZvciAoY29uc3QgY291bnRyeUNvZGUgaW4gZGF0YS5yZXN1bHRzKSB7XG5cdFx0XHRjb25zdCBjb3VudHJ5ID0gZ2V0Q291bnRyeU5hbWUoY291bnRyeUNvZGUpO1xuXHRcdFx0cHJvdmlkZXJzQnlDb3VudHJ5W2NvdW50cnldID0ge1xuXHRcdFx0XHRzdHJlYW06IFtdLFxuXHRcdFx0XHRyZW50OiBbXSxcblx0XHRcdFx0YnV5OiBbXSxcblx0XHRcdFx0Y291bnRyeUNvZGU6IGNvdW50cnlDb2RlLFxuXHRcdFx0fTtcblxuXHRcdFx0Lypcblx0XHRcdFNvcnRzIHByb3ZpZGVycyBiYXNlZCBvbiBjb3VudHJ5IGFuZCBzZXJ2aWNlcyB0aGV5IHByb3ZpZGUuXG5cblx0XHRcdFRha2VzIGluIHR5cGUgb2Ygc2VydmljZXMgYXMgcGFyYW0gPT4gW1wiZmxhdHJhdGUgKHN0cmVhbWluZylcIiwgXG5cdFx0XHRcInJlbnRcIiwgXCJidXlcIl0gYW5kIGFuIGFycmF5IHRvIGFwcGVuZCBpdCB0by5cblx0XHRcdCovXG5cdFx0XHRjb25zdCBzb3J0UHJvdmlkZXJzID0gKHNlcnZpY2VzLCBjb2xsZWN0aW9uKSA9PiB7XG5cdFx0XHRcdGlmIChzZXJ2aWNlcykge1xuXHRcdFx0XHRcdHNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHByb3ZpZGVySW5mbyA9IHtcblx0XHRcdFx0XHRcdFx0cHJvdmlkZXJfbmFtZTogc2VydmljZS5wcm92aWRlcl9uYW1lLFxuXHRcdFx0XHRcdFx0XHRwcm92aWRlcl9sb2dvX3BhdGg6IHNlcnZpY2UubG9nb19wYXRoLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdGNvbGxlY3Rpb24ucHVzaChwcm92aWRlckluZm8pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBBZGQgc3RyZWFtaW5nIHNlcnZpY2VzIGZvciBzcGVjaWZpZWQgbW92aWUgaW4gZWFjaCBjb3VudHJ5LlxuXHRcdFx0c29ydFByb3ZpZGVycyhcblx0XHRcdFx0ZGF0YS5yZXN1bHRzW2NvdW50cnlDb2RlXS5mbGF0cmF0ZSxcblx0XHRcdFx0cHJvdmlkZXJzQnlDb3VudHJ5W2NvdW50cnldLnN0cmVhbVxuXHRcdFx0KTtcblxuXHRcdFx0Ly8gQWRkIHJlbnRpbmcgc2VydmljZXMgZm9yIHNwZWljaWZpZWQgbW92aWUgaW4gZWFjaCBjb3VudHJ5LlxuXHRcdFx0c29ydFByb3ZpZGVycyhcblx0XHRcdFx0ZGF0YS5yZXN1bHRzW2NvdW50cnlDb2RlXS5yZW50LFxuXHRcdFx0XHRwcm92aWRlcnNCeUNvdW50cnlbY291bnRyeV0ucmVudFxuXHRcdFx0KTtcblxuXHRcdFx0Ly8gQWRkIGJ1eWluZyBzZXJ2aWNlcyBmb3Igc3BlY2lmaWVkIG1vdmllIGluIGVhY2ggY291bnRyeS5cblx0XHRcdHNvcnRQcm92aWRlcnMoXG5cdFx0XHRcdGRhdGEucmVzdWx0c1tjb3VudHJ5Q29kZV0uYnV5LFxuXHRcdFx0XHRwcm92aWRlcnNCeUNvdW50cnlbY291bnRyeV0uYnV5XG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvdmlkZXJzQnlDb3VudHJ5O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3JvcihgRmFpbGVkIHRvIGZldGNoIG1vdmllIHByb3ZpZGVyczogJHtlcnJvci5tZXNzYWdlfWApO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gb2YgdGhlIG1vdmllIHRyYWlsZXIuIFRoZSBpZCBzaG91bGQgYWxzb1xuICogYmUgcmV0cmlldmVkIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHNlYXJjaCBmb3IgdGhlIG1vdmllIHJlc3BlY3RpdmVseS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBtb3ZpZV9pZCBJZGVudGlmaWVzIHRoZSBtb3ZpZSBhcyBhbiBJbnRlZ2VyLlxuICogQHJldHVybnMge09iamVjdH1cdFx0UmVsZXZhbnQgaW5mbyBvZiB0cmFpbGVyIGluY2x1ZGluZyB2aWRlbyBuYW1lLCBzaXRlXG4gKiBcdFx0XHRcdFx0XHRcdGxhbmd1YWdlIGFuZCB0eXBlLlxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaE1vdmllVHJhaWxlcihtb3ZpZV9pZCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG5cdFx0XHRgaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy9tb3ZpZS8ke21vdmllX2lkfS92aWRlb3M/YXBpX2tleT1cblx0XHRcdCR7QVBJX0tFWX0mbW9kZT1jb3JzYFxuXHRcdCk7XG5cdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIG1vdmllIHRyYWlsZXJzIGZyb20gQVBJLlwiKTtcblx0XHR9XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuXHRcdC8vIEZpbmQgYWxsIHRyYWlsZXJzXG5cdFx0Y29uc3QgdHJhaWxlcnMgPSBkYXRhLnJlc3VsdHMuZmlsdGVyKFxuXHRcdFx0KHZpZGVvKSA9PiB2aWRlby50eXBlID09PSBcIlRyYWlsZXJcIlxuXHRcdCk7XG5cdFx0aWYgKHRyYWlsZXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG5cdFx0Ly8gRmluZCBvZmZpY2lhbCB0cmFpbGVyLk9SIHVzZSBmaXJzdCB0cmFpbGVyXG5cdFx0Y29uc3QgbW92aWVUcmFpbGVyID1cblx0XHRcdHRyYWlsZXJzLmZpbmQoKHZpZGVvKSA9PiB2aWRlby5vZmZpY2lhbCA9PT0gdHJ1ZSkgfHwgdHJhaWxlcnNbMF07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dE5hbWU6IG1vdmllVHJhaWxlci5uYW1lLFxuXHRcdFx0a2V5OiBtb3ZpZVRyYWlsZXIua2V5LFxuXHRcdFx0c2l0ZTogbW92aWVUcmFpbGVyLnNpdGUsXG5cdFx0XHR0eXBlOiBtb3ZpZVRyYWlsZXIudHlwZSxcblx0XHRcdGxhbmc6IGdldExhbmd1YWdlKG1vdmllVHJhaWxlci5pc29fNjM5XzEpLFxuXHRcdH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGZldGNoIG1vdmllIHRyYWlsZXJzOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCA1IHJldmlld3Mgd2l0aCB0aGVpciByYXRpbmdzLCBhdXRob3IgaW5mb3JtYXRpb24gYW5kIGxpbmtzLlxuICogQHBhcmFtIHtOdW1iZXJ9IG1vdmllX2lkIElkZW50aWZpZXMgdGhlIG1vdmllIGFzIGFuIEludGVnZXJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHRcdFJldmlldyBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgdGhlIGNvbnRlbnQsIGF1dGhvcixcbiAqIFx0XHRcdFx0XHRcdFx0bGlua3MgYW5kIHJhdGluZ3MuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoTW92aWVSZXZpZXdzKG1vdmllX2lkKSB7XG5cdHRyeSB7XG5cdFx0bGV0IHJldmlld3MgPSBbXTtcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuXHRcdFx0YGh0dHBzOi8vYXBpLnRoZW1vdmllZGIub3JnLzMvbW92aWUvJHttb3ZpZV9pZH0vcmV2aWV3cz9hcGlfa2V5PVxuXHRcdFx0JHtBUElfS0VZfSZsYW5ndWFnZT1lbi1VUyZwYWdlPTFgLFxuXHRcdFx0eyBtb2RlOiBcImNvcnNcIiB9XG5cdFx0KTtcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRcdGlmIChkYXRhLnJlc3VsdHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cblx0XHRkYXRhLnJlc3VsdHMuZm9yRWFjaCgocmV2aWV3KSA9PiB7XG5cdFx0XHRyZXZpZXdzLnB1c2goe1xuXHRcdFx0XHRhdXRob3I6IHJldmlldy5hdXRob3IsXG5cdFx0XHRcdHJhdGluZzogcmV2aWV3LmF1dGhvcl9kZXRhaWxzPy5yYXRpbmcsXG5cdFx0XHRcdHBpY19wYXRoOiByZXZpZXcuYXV0aG9yX2RldGFpbHM/LmF2YXRhcl9wYXRoLFxuXHRcdFx0XHRjb250ZW50OiByZXZpZXcuY29udGVudCxcblx0XHRcdFx0dXJsOiByZXZpZXcudXJsLFxuXHRcdFx0XHRsYXN0X3VwZGF0ZWQ6IHJldmlldy51cGRhdGVkX2F0LFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJldmlld3Muc2xpY2UoMCwgNSk7IC8vIEZpcnN0IDUgcmV2aWV3cyByZXR1cm5lZFxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWwgdG8gZmV0Y2ggbW92aWUgcmV2aWV3czogJHtlcnJvci5tZXNzYWdlfWApO1xuXHR9XG59XG5cbi8vIEhlbHBlciBmbmNzXG5mdW5jdGlvbiBnZXRDb3VudHJ5TmFtZShjb2RlKSB7XG5cdGxldCByZWdpb25OYW1lcyA9IG5ldyBJbnRsLkRpc3BsYXlOYW1lcyhbXCJlblwiXSwgeyB0eXBlOiBcInJlZ2lvblwiIH0pO1xuXHRyZXR1cm4gcmVnaW9uTmFtZXMub2YoY29kZSk7XG59XG5cbmZ1bmN0aW9uIGdldExhbmd1YWdlKGNvZGUpIHtcblx0Y29uc3QgbGFuZyA9IG5ldyBJbnRsLkRpc3BsYXlOYW1lcyhbXCJlblwiXSwgeyB0eXBlOiBcImxhbmd1YWdlXCIgfSk7XG5cdHJldHVybiBsYW5nLm9mKGNvZGUpO1xufVxuZXhwb3J0IHtcblx0ZmV0Y2hNb3ZpZURldGFpbHMsXG5cdGZldGNoTW92aWVSZWNjb3MsXG5cdGZldGNoTW92aWVQcm92aWRlcnMsXG5cdGZldGNoTW92aWVUcmFpbGVyLFxuXHRmZXRjaE1vdmllUmV2aWV3cyxcblx0Z2V0Q291bnRyeU5hbWUsXG59O1xuIiwiY29uc3QgQVBJX0tFWSA9IFwiNzIwZDIxNTBjZjA5YmZhNjFlMjhhNTA0MmNkNzQ2OGZcIjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWxldmFudCBpbmZvcm1hdGlvbiBvZiBhIHR2IHNob3cgYmFzZWQgb24gaXRzIGlkLlxuICogQHBhcmFtIHtOdW1iZXJ9IHR2X2lkIElkZW50aWZpZXMgdHYgc2hvdyBieSBhbiBpbnRlZ2VyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVx0IFJlbGV2YW50IGluZm9ybWF0aW9uIG9mIFRWIFNIT1cuIGkuZS4gbmFtZSBhbmQgbnVtYmVyXG4gKiBcdFx0XHRcdFx0XHQgc2Vhc29uc1xuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFR2RGV0YWlscyh0dl9pZCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG5cdFx0XHRgaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy90di8ke3R2X2lkfT9hcGlfa2V5PSR7QVBJX0tFWX1cblx0XHRcdCZsYW5ndWFnZT1lbi1VU2AsXG5cdFx0XHR7IG1vZGU6IFwiY29yc1wiIH1cblx0XHQpO1xuXG5cdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIFRWIGRldGFpbHMgZnJvbSBBUEkuXCIpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cblx0XHRjb25zdCBnZW5yZXMgPSBkYXRhLmdlbnJlcy5yZWR1Y2UoKGFjYywgdmFsKSA9PiBbLi4uYWNjLCB2YWwubmFtZV0sIFtdKTtcblxuXHRcdGNvbnN0IGdlbmVyYWxJbmZvID0ge1xuXHRcdFx0dE5hbWU6IGRhdGEub3JpZ2luYWxfbmFtZSxcblx0XHRcdHRhZ2xpbmU6IGRhdGEudGFnbGluZSxcblx0XHRcdGxhbmd1YWdlOiBkYXRhLm9yaWdpbmFsX2xhbmd1YWdlLFxuXHRcdFx0c3VtbWFyeTogZGF0YS5vdmVydmlldyxcblx0XHRcdGVwaXNvZGVfcnVuX3RpbWU6IGRhdGEuZXBpc29kZV9ydW5fdGltZVswXSxcblx0XHRcdG9yaWdpbl9jb3VudHJ5OiBkYXRhLm9yaWdpbl9jb3VudHJ5LFxuXHRcdFx0dm90ZV9hdmVyYWdlOiBkYXRhLnZvdGVfYXZlcmFnZSxcblx0XHRcdHZvdGVfY291bnQ6IGRhdGEudm90ZV9jb3VudCxcblx0XHRcdHN0YXR1czogZGF0YS5zdGF0dXMsXG5cdFx0XHRzZWFzb25zOiBkYXRhLnNlYXNvbnMsXG5cdFx0XHRudW1iZXJfb2Zfc2Vhc29uczogZGF0YS5udW1iZXJfb2Zfc2Vhc29ucyxcblx0XHRcdGZpcnN0X2Fpcl9kYXRlOiBkYXRhLmZpcnN0X2Fpcl9kYXRlLFxuXHRcdFx0bGFzdF9haXJfZGF0ZTogZGF0YS5sYXN0X2Fpcl9kYXRlLFxuXHRcdFx0YmFja2Ryb3BfcGF0aDogZGF0YS5iYWNrZHJvcF9wYXRoLFxuXHRcdFx0cG9zdGVyX3BhdGg6IGRhdGEucG9zdGVyX3BhdGgsXG5cdFx0XHRwb3B1bGFyaXR5OiBkYXRhLnBvcHVsYXJpdHksXG5cdFx0XHRnZW5yZXM6IGdlbnJlcyxcblx0XHR9O1xuXHRcdHJldHVybiBnZW5lcmFsSW5mbztcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0YEZhaWxlZCB0byBmZXRjaCByZWxldmFudCBpbmZvcm1hdGlvbiBmb3IgVFYgU0hPVzogJHtlcnJvci5tZXNzYWdlfWBcblx0XHQpO1xuXHR9XG59XG5cbi8qXG5SZXR1cm5zIGFuIGFycmF5IG9mIHJlY29tbWVuZGVkIHR2IHNob3dzIHdpdGggdGhlaXIgbmFtZSwgaWQsIHBvc3Rlcl9wYXRoIGFuZFxuYmFja2Ryb3BfcGF0aCByZWNvcmRlZC4gXG5JZiBubyBtb3ZpZXMgYXJlIHJlY29tbWVuZGVkLCByZXR1cm4gbnVsbDtcbiovXG4vKipcbiAqIFJldHVybnMsIGF0IG1vc3QgNSwgcmVjb21tZW5kYXRpb24gYmFzZWQgb24gdGhlIHNwZWNpZmllZCBUViBTSE9XLiBUaGVcbiAqIG1vc3QgcmVsZXZhbnQgaW5mb3JtYXRpb24gZm9yIGVhY2ggcmVjY28gaXMgcmV0dXJuZWQgYXMgYW4gb2JqZWN0LlxuICogQHBhcmFtIHtOdW1iZXJ9IHR2X2lkIElkZW50aWZpZXMgdGhlIHNwZWNpZmllZCBUViBzaG93IGJ5IGFuIEludGVnZXJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFx0IE1heCA1IHJlY29tbWVuZGF0aW9ucyB3aXRoIGl0cyByZWxldmFudCBpbmZvcm1hdGlvblxuICogXHRcdFx0XHRcdFx0IGFzIGFuIG9iamVjdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hUdlJlY2Nvcyh0dl9pZCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG5cdFx0XHRgaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy90di8ke3R2X2lkfS9yZWNvbW1lbmRhdGlvbnM/YXBpX2tleT0ke0FQSV9LRVl9Jmxhbmd1YWdlPWVuLVVTJnBhZ2U9MWAsXG5cdFx0XHR7IG1vZGU6IFwiY29yc1wiIH1cblx0XHQpO1xuXHRcdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBUViByZWNvbW1lbmRhdGlvbnMgZnJvbSBBUEkuXCIpO1xuXHRcdH1cblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG5cdFx0Y29uc3QgcmVjVHZzID0gZGF0YS5yZXN1bHRzPy5zbGljZSgwLCA1KS5yZWR1Y2UoKGFjYywgdHYpID0+IHtcblx0XHRcdGFjY1t0di5vcmlnaW5hbF9uYW1lXSA9IHtcblx0XHRcdFx0dE5hbWU6IHR2Lm9yaWdpbmFsX25hbWUsXG5cdFx0XHRcdGlkOiB0di5pZCxcblx0XHRcdFx0Zmlyc3RfYWlyX2RhdGU6IHR2LmZpcnN0X2Fpcl9kYXRlLFxuXHRcdFx0XHRwb3N0ZXJfcGF0aDogdHYucG9zdGVyX3BhdGgsXG5cdFx0XHRcdGJhY2tkcm9wX3BhdGg6IHR2LmJhY2tkcm9wX3BhdGgsXG5cdFx0XHRcdHZvdGVfYXZlcmFnZTogdHYudm90ZV9hdmVyYWdlLFxuXHRcdFx0XHR2b3RlX2NvdW50OiB0di52b3RlX2NvdW50LFxuXHRcdFx0fTtcblx0XHRcdHJldHVybiBhY2M7XG5cdFx0fSwge30pO1xuXG5cdFx0cmV0dXJuIHJlY1R2cyB8fCB7fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggVFYgcmVjb21tZW5kYXRpb25zOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHJlbGV2YW50IFRWIHByb3ZpZGVycyBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgVFYgc2hvdy5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0dl9pZCBJZGVudGlmaWVzIHRoZSBzcGVjaWZpZWQgVFYgc2hvdyBieSBhbiBJbnRlZ2VyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVx0IFRWIHByb3ZpZGVycyBmb3Igc3RyZWFtaW5nLCBwdXJjaGFzZSBhbmQvb3IgcmVudFxuICogXHRcdFx0XHRcdFx0IGZvciB0aGUgc3BlY2lmaWVkIFRWIHNob3cuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoVHZQcm92aWRlcnModHZfaWQpIHtcblx0Y29uc3QgcHJvdmlkZXJzQnlDb3VudHJ5ID0ge307XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcblx0XHRcdGBodHRwczovL2FwaS50aGVtb3ZpZWRiLm9yZy8zL3R2LyR7dHZfaWR9L3dhdGNoL3Byb3ZpZGVycz9hcGlfa2V5PSR7QVBJX0tFWX1gLFxuXHRcdFx0eyBtb2RlOiBcImNvcnNcIiB9XG5cdFx0KTtcblxuXHRcdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIFRWIHNob3cgcHJvdmlkZXJzIGZyb20gQVBJLmApO1xuXHRcdH1cblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG5cdFx0Zm9yIChjb25zdCBjb3VudHJ5Q29kZSBpbiBkYXRhLnJlc3VsdHMpIHtcblx0XHRcdGNvbnN0IGNvdW50cnkgPSBnZXRDb3VudHJ5TmFtZShjb3VudHJ5Q29kZSk7XG5cdFx0XHRwcm92aWRlcnNCeUNvdW50cnlbY291bnRyeV0gPSB7XG5cdFx0XHRcdHN0cmVhbTogW10sXG5cdFx0XHRcdHJlbnQ6IFtdLFxuXHRcdFx0XHRidXk6IFtdLFxuXHRcdFx0XHRjb3VudHJ5Q29kZTogY291bnRyeUNvZGUsXG5cdFx0XHR9O1xuXG5cdFx0XHQvKlxuXHRcdFx0U29ydHMgcHJvdmlkZXJzIGJhc2VkIG9uIGNvdW50cnkgYW5kIHNlcnZpY2VzIHRoZXkgcHJvdmlkZS5cblxuXHRcdFx0VGFrZXMgaW4gdHlwZSBvZiBzZXJ2aWNlcyBhcyBwYXJhbSA9PiBbXCJmbGF0cmF0ZSAoc3RyZWFtaW5nKVwiLCBcblx0XHRcdFwicmVudFwiLCBcImJ1eVwiXSBhbmQgYW4gYXJyYXkgdG8gYXBwZW5kIGl0IHRvLlxuXHRcdFx0Ki9cblx0XHRcdGNvbnN0IHNvcnRQcm92aWRlcnMgPSAoc2VydmljZXMsIGNvbGxlY3Rpb24pID0+IHtcblx0XHRcdFx0aWYgKHNlcnZpY2VzKSB7XG5cdFx0XHRcdFx0c2VydmljZXMuZm9yRWFjaCgoc2VydmljZSkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgcHJvdmlkZXJJbmZvID0ge1xuXHRcdFx0XHRcdFx0XHRwcm92aWRlcl9uYW1lOiBzZXJ2aWNlLnByb3ZpZGVyX25hbWUsXG5cdFx0XHRcdFx0XHRcdHByb3ZpZGVyX2xvZ29fcGF0aDogc2VydmljZS5sb2dvX3BhdGgsXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0Y29sbGVjdGlvbi5wdXNoKHByb3ZpZGVySW5mbyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdC8vIEFkZCBzdHJlYW1pbmcgc2VydmljZXMgZm9yIHNwZWNpZmllZCBtb3ZpZSBpbiBlYWNoIGNvdW50cnkuXG5cdFx0XHRzb3J0UHJvdmlkZXJzKFxuXHRcdFx0XHRkYXRhLnJlc3VsdHNbY291bnRyeUNvZGVdLmZsYXRyYXRlLFxuXHRcdFx0XHRwcm92aWRlcnNCeUNvdW50cnlbY291bnRyeV0uc3RyZWFtXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBBZGQgcmVudGluZyBzZXJ2aWNlcyBmb3Igc3BlaWNpZmllZCBtb3ZpZSBpbiBlYWNoIGNvdW50cnkuXG5cdFx0XHRzb3J0UHJvdmlkZXJzKFxuXHRcdFx0XHRkYXRhLnJlc3VsdHNbY291bnRyeUNvZGVdLnJlbnQsXG5cdFx0XHRcdHByb3ZpZGVyc0J5Q291bnRyeVtjb3VudHJ5XS5yZW50XG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBBZGQgYnV5aW5nIHNlcnZpY2VzIGZvciBzcGVjaWZpZWQgbW92aWUgaW4gZWFjaCBjb3VudHJ5LlxuXHRcdFx0c29ydFByb3ZpZGVycyhcblx0XHRcdFx0ZGF0YS5yZXN1bHRzW2NvdW50cnlDb2RlXS5idXksXG5cdFx0XHRcdHByb3ZpZGVyc0J5Q291bnRyeVtjb3VudHJ5XS5idXlcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBwcm92aWRlcnNCeUNvdW50cnk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGZldGNoIFRWIHByb3ZpZGVyczogJHtlcnJvci5tZXNzYWdlfWApO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gb2YgdGhlIHR2IHRyYWlsZXIuIFRoZSBpZCBzaG91bGQgYWxzb1xuICogYmUgcmV0cmlldmVkIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHNlYXJjaCBmb3IgdGhlIHR2IHJlc3BlY3RpdmVseS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0dl9pZCBJZGVudGlmaWVzIHRoZSB0diBzaG93IGFzIGFuIEludGVnZXIuXG4gKiBAcmV0dXJucyB7T2JqZWN0fVx0IFJlbGV2YW50IGluZm8gb2YgdHJhaWxlciBpbmNsdWRpbmcgdmlkZW8gbmFtZSwgc2l0ZVxuICogXHRcdFx0XHRcdFx0IGxhbmd1YWdlIGFuZCB0eXBlLlxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFR2VHJhaWxlcih0dl9pZCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG5cdFx0XHRgaHR0cHM6Ly9hcGkudGhlbW92aWVkYi5vcmcvMy90di8ke3R2X2lkfS92aWRlb3M/YXBpX2tleT0ke0FQSV9LRVl9YCxcblx0XHRcdHsgbW9kZTogXCJjb3JzXCIgfVxuXHRcdCk7XG5cdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIFRWIHRyYWlsZXIgZnJvbSBBUEkuXCIpO1xuXHRcdH1cblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG5cdFx0Y29uc3QgdHJhaWxlcnMgPSBkYXRhLnJlc3VsdHMuZmlsdGVyKFxuXHRcdFx0KHZpZGVvKSA9PiB2aWRlby50eXBlID09PSBcIlRyYWlsZXJcIlxuXHRcdCk7XG5cblx0XHRpZiAodHJhaWxlcnMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cblx0XHQvLyBGaW5kIG9mZmljaWFsIHRyYWlsZXIgb3IgdXNlIHRoZSBmaXJzdCB0cmFpbGVyLlxuXHRcdGNvbnN0IHR2VHJhaWxlciA9XG5cdFx0XHR0cmFpbGVycy5maW5kKCh2aWRlbykgPT4gdmlkZW8ub2ZmaWNpYWwgPT09IHRydWUpIHx8IHRyYWlsZXJzWzBdO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHROYW1lOiB0dlRyYWlsZXIubmFtZSxcblx0XHRcdGtleTogdHZUcmFpbGVyLmtleSxcblx0XHRcdHNpdGU6IHR2VHJhaWxlci5zaXRlLFxuXHRcdFx0dHlwZTogdHZUcmFpbGVyLnR5cGUsXG5cdFx0XHRsYW5nOiBnZXRMYW5ndWFnZSh0dlRyYWlsZXIuaXNvXzYzOV8xKSxcblx0XHR9O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmZXRjaCBUViB0cmFpbGVyOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCA1IHJldmlld3Mgd2l0aCB0aGVpciByYXRpbmdzLCBhdXRob3IgaW5mb3JtYXRpb24gYW5kIGxpbmtzLlxuICogQHBhcmFtIHtOdW1iZXJ9IG1vdmllX2lkIElkZW50aWZpZXMgdGhlIFRWIHNob3cgYXMgYW4gSW50ZWdlclxuICogQHJldHVybnMge09iamVjdH1cdFx0UmV2aWV3IGluZm9ybWF0aW9uIGluY2x1ZGluZyB0aGUgY29udGVudCwgYXV0aG9yLFxuICogXHRcdFx0XHRcdFx0XHRsaW5rcyBhbmQgcmF0aW5ncy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hUdlJldmlld3ModHZfaWQpIHtcblx0dHJ5IHtcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuXHRcdFx0YGh0dHBzOi8vYXBpLnRoZW1vdmllZGIub3JnLzMvdHYvJHt0dl9pZH0vcmV2aWV3cz9hcGlfa2V5PVxuXHRcdFx0JHtBUElfS0VZfSZsYW5ndWFnZT1lbi1VUyZwYWdlPTFgLFxuXHRcdFx0eyBtb2RlOiBcImNvcnNcIiB9XG5cdFx0KTtcblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggVFYgcmV2aWV3cyBmcm9tIEFQSS5cIik7XG5cdFx0fVxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cdFx0aWYgKGRhdGEucmVzdWx0cy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcblxuXHRcdGNvbnN0IHJldmlld3MgPSBkYXRhLnJlc3VsdHNcblx0XHRcdC5tYXAoKHJldmlldykgPT4gKHtcblx0XHRcdFx0YXV0aG9yOiByZXZpZXcuYXV0aG9yLFxuXHRcdFx0XHRyYXRpbmc6IHJldmlldy5hdXRob3JfZGV0YWlscz8ucmF0aW5nLFxuXHRcdFx0XHRwaWNfcGF0aDogcmV2aWV3LmF1dGhvcl9kZXRhaWxzPy5hdmF0YXJfcGF0aCxcblx0XHRcdFx0Y29udGVudDogcmV2aWV3LmNvbnRlbnQsXG5cdFx0XHRcdHVybDogcmV2aWV3LnVybCxcblx0XHRcdFx0bGFzdF91cGRhdGVkOiByZXZpZXcudXBkYXRlZF9hdCxcblx0XHRcdH0pKVxuXHRcdFx0LnNsaWNlKDAsIDUpOyAvLyBPbmx5IHJldHVybiB0aGUgZmlyc3QgNSByZXZpZXdzIG1heGltdW0uXG5cblx0XHRyZXR1cm4gcmV2aWV3cztcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggVFYgcmV2aWV3czogJHtlcnJvci5tZXNzYWdlfWApO1xuXHR9XG59XG5cbi8vIEhlbHBlciBmbmNzXG5mdW5jdGlvbiBnZXRDb3VudHJ5TmFtZShjb2RlKSB7XG5cdGxldCByZWdpb25OYW1lcyA9IG5ldyBJbnRsLkRpc3BsYXlOYW1lcyhbXCJlblwiXSwgeyB0eXBlOiBcInJlZ2lvblwiIH0pO1xuXHRyZXR1cm4gcmVnaW9uTmFtZXMub2YoY29kZSk7XG59XG5cbmZ1bmN0aW9uIGdldExhbmd1YWdlKGNvZGUpIHtcblx0Y29uc3QgbGFuZyA9IG5ldyBJbnRsLkRpc3BsYXlOYW1lcyhbXCJlblwiXSwgeyB0eXBlOiBcImxhbmd1YWdlXCIgfSk7XG5cdHJldHVybiBsYW5nLm9mKGNvZGUpO1xufVxuZXhwb3J0IHtcblx0ZmV0Y2hUdkRldGFpbHMsXG5cdGZldGNoVHZSZWNjb3MsXG5cdGZldGNoVHZQcm92aWRlcnMsXG5cdGZldGNoVHZUcmFpbGVyLFxuXHRmZXRjaFR2UmV2aWV3cyxcbn07XG4iLCJpbXBvcnQgKiBhcyBtb3ZpZSBmcm9tIFwiLi4vYXBpRnVuY3Rpb25zL2ZldGNoTW92aWVJbmZvXCI7XG5pbXBvcnQgKiBhcyB0diBmcm9tIFwiLi4vYXBpRnVuY3Rpb25zL2ZldGNoVHZJbmZvXCI7XG5pbXBvcnQgKiBhcyBwYWdlIGZyb20gXCIuL2RyYXdTZWN0aW9uc1wiO1xuXG4vKipcbiAqIERyYXcgYW4gaW5kaXZpZHVhbCBzZWN0aW9uIGJhc2VkIG9uIHVzZXIgaW5wdXQgcXVlcnkuXG4gKiBUaGlzIHNlY3Rpb24gd2lsbCBjb25zdHMgb2YgdGhlIG92ZXJhbGwgbW92aWUvdHYnc1xuICogXHQtIERldGFpbHMsXG4gKiBcdC0gVGhlIHdhdGNoIHByb3ZpZGVycyBiYXNlZCBvbiBzcGVjaWZpYyBjb3VudHJpZXNcbiAqIFx0LSBBdmFpbGFibGUgdHJhaWxlcnMsXG4gKiBcdC0gT3RoZXIgcmVjb21tZW5kYXRpb25zLlxuICogXHQtIFJldmlld3MgYnkgZXN0YWJsaXNoZWQgYXV0aG9ycyBiYXNlZCBmcm9tIHJhbmRvbSBzb3VyY2VzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIEFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBzZWxlY3RlZCBtb3ZpZSBvciBUViBzaG93XG4gKiBAcGFyYW0ge1N0cmluZ30gbWVkaWEgVGhlIHNwZWNpZmllZCBtZWRpYSB0eXBlIG9mIHRoZSBtb3ZpZSAvIFRWIHNob3dcbiAqIEByZXR1cm5zIHtPYmplY3R9XHQgRnVuY3Rpb25zIHRoYXQgZHJhd3MgYWxsIHJlbGV2YW50IGluZm9ybWF0aW9uIGluIGFcbiAqIFx0XHRcdFx0XHRcdCBhcyBhIHNlY3Rpb24uXG4gKi9cbmNvbnN0IGRyYXdTZWN0aW9uID0gYXN5bmMgKGlkLCBtZWRpYSkgPT4ge1xuXHRjb25zdCBzZWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlY3Rpb25cIik7XG5cdGNvbnN0IGRldGFpbHMgPSBhd2FpdCBnZXRJbmZvKFxuXHRcdGlkLFxuXHRcdG1vdmllLmZldGNoTW92aWVEZXRhaWxzLFxuXHRcdHR2LmZldGNoVHZEZXRhaWxzXG5cdCk7XG5cdGNvbnN0IHJlY3MgPSBhd2FpdCBnZXRJbmZvKGlkLCBtb3ZpZS5mZXRjaE1vdmllUmVjY29zLCB0di5mZXRjaFR2UmVjY29zKTtcblx0Y29uc3QgcHJvdmlkZXJzID0gYXdhaXQgZ2V0SW5mbyhcblx0XHRpZCxcblx0XHRtb3ZpZS5mZXRjaE1vdmllUHJvdmlkZXJzLFxuXHRcdHR2LmZldGNoVHZQcm92aWRlcnNcblx0KTtcblx0Y29uc3QgdHJhaWxlciA9IGF3YWl0IGdldEluZm8oXG5cdFx0aWQsXG5cdFx0bW92aWUuZmV0Y2hNb3ZpZVRyYWlsZXIsXG5cdFx0dHYuZmV0Y2hUdlRyYWlsZXJcblx0KTtcblx0Y29uc3QgcmV2aWV3cyA9IGF3YWl0IGdldEluZm8oXG5cdFx0aWQsXG5cdFx0bW92aWUuZmV0Y2hNb3ZpZVJldmlld3MsXG5cdFx0dHYuZmV0Y2hUdlJldmlld3Ncblx0KTtcblxuXHRzZWN0aW9uLmNsYXNzTGlzdC5hZGQoXCJzZWN0aW9uLWNvbnRhaW5lclwiKTtcblx0ZnVuY3Rpb24gZHJhd0FsbCgpIHtcblx0XHRhZGRUb1NlY3Rpb24oZHJhd0ludHJvKCkpO1xuXHR9XG5cblx0Ly8gSWYgY2VydGFpbiBpbmZvIGV4aXN0cywgaS5lLiByZXZpZXdzLCBhcHBlbmQsIGRyYXcgdGhlIHJlbGV2YW50XG5cdC8vIGluZm9ybWF0aW9uIGFuZCBhZGQgaXQgdG8gdGhlIHNlY3Rpb24uXG5cdGZ1bmN0aW9uIGFkZFRvU2VjdGlvbihpbmZvKSB7XG5cdFx0aW5mbyAmJiBzZWN0aW9uLmFwcGVuZENoaWxkKGluZm8pO1xuXHR9XG5cblx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIHJlbmRlciBhbiBlbGVtZW50IGFuZCBhZGQgYSBjb3JyZXNwb25kaW5nIGNsYXNzIG5hbWUuXG5cdGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQodGFnLCBjbGFzc05hbWUpIHtcblx0XHRjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG5cdFx0Y29udGFpbmVyLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRyZXR1cm4gY29udGFpbmVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZldGNoIGluZm9ybWF0aW9uIHVzaW5nIG1vdmllIG9yIFRWIHNob3cgZnVuY3Rpb24gYmFzZWQgb24gbWVkaWEgdHlwZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGlkIE1vdmllL1RWIHNob3cgaWRcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbW92aWVGbmMgRmV0Y2ggbW92aWUgZnVuY3Rpb24gaWYgYXBwbGljYWJsZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0dkZuYyBGZXRjaCBUViBmdW5jdGlvbiBpZiBhcHBsaWNhYmxlLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGFzeW5jIGZ1bmN0aW9uIGdldEluZm8oaWQsIG1vdmllRm5jLCB0dkZuYykge1xuXHRcdHJldHVybiBtZWRpYSA9PT0gXCJtb3ZpZVwiID8gYXdhaXQgbW92aWVGbmMoaWQpIDogYXdhaXQgdHZGbmMoaWQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERyYXcgKGlmIGFueSkgdGl0bGUsIHBob3RvLCB0YWdsaW5lIGFuZCBzdW1tYXJ5LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaW1nU2l6ZSAgQW4gaW50ZWdlciBkaXNwbGF5aW5nIHRoZSBkZXNpcmVkIHBvc3RlciBzaXplXG5cdCAqIFx0XHRcdFx0XHRcdFx0d2lkdGguXG5cdCAqIEByZXR1cm5zIHtOb2RlfVx0XHRcdE5vZGUgY29udGFpbmVyIGNvbnNpc3Rpbmcgb2YgZWxlbWVudHMgd2l0aCBtb3N0XG5cdCAqIFx0XHRcdFx0XHRcdFx0cmVsZXZhbnQgaW5mb3JtYXRpb24gb2Ygc3BlY2lmaWVkIG1vdmllL1RWIHNob3cuXG5cdCAqL1xuXHRjb25zdCBkcmF3SW50cm8gPSAoaW1nU2l6ZSkgPT4ge1xuXHRcdGNvbnN0IGludHJvQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRpbnRyb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaW50cm9cIik7XG5cblx0XHRpbnRyb0NvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVUaXRsZSgpKTtcblx0XHRpbnRyb0NvbnRhaW5lci5hcHBlbmRDaGlsZCh3cml0ZVRhZ2xpbmUoKSk7XG5cblx0XHRjb25zdCBpbWcgPSByZW5kZXJJbWcoaW1nU2l6ZSk7XG5cdFx0aW1nICYmIGludHJvQ29udGFpbmVyLmFwcGVuZENoaWxkKGltZyk7XG5cblx0XHQvKipcblx0XHQgKiBEaXNwbGF5cyB0aGUgdGl0bGUgb2YgdGhlIG1vdmllL1RWIHNob3cuXG5cdFx0ICogQHJldHVybnMge05vZGV9XHRUaXRsZSBvZiB0aGUgbW92aWUvVFYgc2hvd1xuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGNyZWF0ZVRpdGxlKCkge1xuXHRcdFx0Y29uc3QgdGl0bGUgPSByZW5kZXJFbGVtZW50KFwiaDFcIiwgXCJ0aXRsZVwiKTtcblx0XHRcdHRpdGxlLnRleHRDb250ZW50ID0gZGV0YWlscy5tTmFtZSA/IGRldGFpbHMubU5hbWUgOiBkZXRhaWxzLnROYW1lO1xuXHRcdFx0cmV0dXJuIHRpdGxlO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcnMgcG9zdGVyIGltYWdlIGJhc2VkIG9uIGltZyBzaXplLlxuXHRcdCAqIEBwYXJhbSB7TnVtYmVyfSBpbWdTaXplIERlc2lyZWQgd2lkdGggb2YgdGhlIHBvc3RlciBpbWFnZS5cblx0XHQgKiBAcmV0dXJucyB7Tm9kZX0gICAgICAgICBFbGVtZW50IGNvbnNpc3RpbmcgdGhlIGltYWdlIHBvc3Rlci5cblx0XHQgKi9cblx0XHRmdW5jdGlvbiByZW5kZXJJbWcoaW1nU2l6ZSA9IFwiXCIpIHtcblx0XHRcdGNvbnN0IHBvc3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG5cdFx0XHRjb25zdCBiYXNlSW1nVXJsID0gXCJodHRwczovL2ltYWdlLnRtZGIub3JnL3QvcFwiO1xuXG5cdFx0XHQvLyBEcmF3IHBvc3RlciBieSBkZWZhdWx0LiBJZiBub25lIGV4aXN0cywgdXNlIGJhY2tkcm9wIHBob3RvLlxuXHRcdFx0Y29uc3QgaW1nUGF0aCA9IGRldGFpbHMucG9zdGVyX3BhdGggfHwgZGV0YWlscy5iYWNrZHJvcF9wYXRoO1xuXG5cdFx0XHRpZiAoIWltZ1BhdGgpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdHBvc3Rlci5jbGFzc0xpc3QuYWRkKFwicG9zdGVyXCIpO1xuXG5cdFx0XHQvLyBJZiBpbWcgc2l6ZSBpcyBzcGVjaWZpZWQsIGFsdGVyIGltYWdlIHRvIHRoZSByZXNwZWN0aXZlIHNpemUuXG5cdFx0XHQvLyBPdGhlcndpc2UsIHVzZSBvcmlnaW5hbCBzaXplLlxuXHRcdFx0cG9zdGVyLnNyYyA9IGltZ1NpemVcblx0XHRcdFx0PyBgJHtiYXNlSW1nVXJsfS93JHtpbWdTaXplfS8ke2ltZ1BhdGh9YFxuXHRcdFx0XHQ6IGAke2Jhc2VJbWdVcmx9L29yaWdpbmFsLyR7aW1nUGF0aH1gO1xuXHRcdFx0cG9zdGVyLmFsdCA9IFwiTW92aWUgcGljdHVyZSBwb3N0ZXJcIjtcblx0XHRcdHBvc3Rlci5zZXRBdHRyaWJ1dGUoXCJsb2FkaW5nXCIsIFwibGF6eVwiKTtcblxuXHRcdFx0cmV0dXJuIHBvc3Rlcjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB3cml0ZVRhZ2xpbmUoKSB7XG5cdFx0XHRjb25zdCB0YWdQYXJhID0gcmVuZGVyRWxlbWVudChcImVtXCIsIFwidGFnbGluZVwiKTtcblx0XHRcdHRhZ1BhcmEudGV4dENvbnRlbnQgPSBgXCIke2RldGFpbHMudGFnbGluZX1cImA7XG5cdFx0XHRyZXR1cm4gdGFnUGFyYTtcblx0XHR9XG5cdFx0cmV0dXJuIGludHJvQ29udGFpbmVyO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEcmF3cyBhbGwgcmVsZXZhbnQgc3ViaW5mbyAod2hlbiBhdmFpbGFibGUpOlxuXHQgKiBcdC0gUmVsZWFzZSBkYXRlXG5cdCAqIFx0LSBGaXJzdCBhaXJlZFxuXHQgKiBcdC0gTGFzdCBhaXJlZFxuXHQgKiBcdC0gU2hvdyBzdGF0dXNcblx0ICogXHQtIFJ1bnRpbWVcblx0ICogXHQtIEdlbnJlc1xuXHQgKiBcdC0gTnVtYmVyIG9mIHNlYXNvbnNcblx0ICogXHQtIEVzdCBBdmcgRXBpc29kZSBydW50aW1lXG5cdCAqIFx0LSBDb3VudHJ5IG9mIG9yaWdpblxuXHQgKiBcdC0gVm90ZSBhdmVyYWdlXG5cdCAqIFx0LSBWb3RlIGNvdW50XG5cdCAqIFx0LSBQb3B1bGFyaXR5XG5cdCAqIEByZXR1cm5zIHtOb2RlfVxuXHQgKi9cblx0Y29uc3QgZHJhd1N1YkluZm9zID0gKCkgPT4ge1xuXHRcdGNvbnN0IGNvbnRhaW5lciA9IHJlbmRlckVsZW1lbnQoXCJkaXZcIiwgXCJzdWJpbmZvLWNvbnRhaW5lclwiKTtcblxuXHRcdC8vIFJlbGVhc2UgZGF0ZSBmb3IgbW92aWVzIGFuZCBmaXJzdCBhaXJlZCBmb3IgdHYgc2hvdy5cblx0XHRsZXQgZGF0ZSwgbGFzdEFpcmVkO1xuXHRcdGlmIChkZXRhaWxzLnJlbGVhc2VfZGF0ZSkge1xuXHRcdFx0ZGF0ZSA9IGNyZWF0ZVN1YkluZm8oXG5cdFx0XHRcdFwiUmVsZWFzZSBEYXRlOlwiLFxuXHRcdFx0XHRkZXRhaWxzLnJlbGVhc2VfZGF0ZS5zcGxpdChcIi1cIikucmV2ZXJzZSgpLmpvaW4oXCIvXCIpXG5cdFx0XHQpO1xuXHRcdFx0bGFzdEFpcmVkID0gXCJcIjtcblx0XHR9IGVsc2UgaWYgKGRldGFpbHMuZmlyc3RfYWlyX2RhdGUpIHtcblx0XHRcdGRhdGUgPSBjcmVhdGVTdWJJbmZvKFxuXHRcdFx0XHRcIkZpcnN0IEFpcmVkOiBcIixcblx0XHRcdFx0ZGV0YWlscy5maXJzdF9haXJfZGF0ZS5zcGxpdChcIi1cIikucmV2ZXJzZSgpLmpvaW4oXCIvXCIpXG5cdFx0XHQpO1xuXHRcdFx0bGFzdEFpcmVkID0gY3JlYXRlU3ViSW5mbyhcblx0XHRcdFx0XCJMYXN0IEFpcmVkOiBcIixcblx0XHRcdFx0ZGV0YWlscy5sYXN0X2Fpcl9kYXRlLnNwbGl0KFwiLVwiKS5yZXZlcnNlKCkuam9pbihcIi9cIilcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGUgPSBcIlwiO1xuXHRcdH1cblx0XHRsZXQgcnVudGltZSA9IGRldGFpbHMucnVudGltZSA/IGNvbnZlcnRNaW5Ub0hyKGRldGFpbHMucnVudGltZSkgOiBcIlwiO1xuXG5cdFx0Y29uc3QgaW5mb3JtYXRpb24gPSBbXG5cdFx0XHRkYXRlLFxuXHRcdFx0bGFzdEFpcmVkLFxuXHRcdFx0Y3JlYXRlU3ViSW5mbyhcIlNob3cgc3RhdHVzOlwiLCBkZXRhaWxzLnN0YXR1cyksXG5cdFx0XHRjcmVhdGVTdWJJbmZvKFwiUnVudGltZTogXCIsIHJ1bnRpbWUpLFxuXHRcdFx0Y3JlYXRlU3ViSW5mbyhcIkdlbnJlczogXCIsIGRldGFpbHMuZ2VucmVzLmpvaW4oXCIsIFwiKSksXG5cdFx0XHRjcmVhdGVTdWJJbmZvKFwiTnVtYmVyIG9mIHNlYXNvbnM6IFwiLCBkZXRhaWxzLm51bWJlcl9vZl9zZWFzb25zKSxcblx0XHRcdGNyZWF0ZVN1YkluZm8oXG5cdFx0XHRcdFwiRXN0IEF2ZyBFcGlzb2RlIFJ1bnRpbWU6IFwiLFxuXHRcdFx0XHRkZXRhaWxzLmVwaXNvZGVfcnVuX3RpbWVcblx0XHRcdCksXG5cdFx0XHRjcmVhdGVTdWJJbmZvKFwiQ291bnRyeSBvZiBPcmlnaW46IFwiLCBkZXRhaWxzLm9yaWdpbl9jb3VudHJ5KSxcblx0XHRcdGNyZWF0ZVN1YkluZm8oXCJWb3RlIEF2ZXJhZ2U6IFwiLCBkZXRhaWxzLnZvdGVfYXZlcmFnZSksXG5cdFx0XHRjcmVhdGVTdWJJbmZvKFwiVm90ZSBDb3VudDogXCIsIGRldGFpbHMudm90ZV9jb3VudCksXG5cdFx0XHRjcmVhdGVTdWJJbmZvKFwiUG9wdWxhcml0eTogXCIsIGRldGFpbHMucG9wdWxhcml0eSksXG5cdFx0XTtcblxuXHRcdGluZm9ybWF0aW9uLmZvckVhY2goKGluZm8pID0+XG5cdFx0XHRpbmZvID8gY29udGFpbmVyLmFwcGVuZENoaWxkKGluZm8pIDogXCJcIlxuXHRcdCk7XG5cblx0XHQvKipcblx0XHQgKiBDcmVhdGUgYSBzdWJpbmZvIGNvbnRhaW5lciBiYXNlZCBvbiB0aGUgY2F0ZWdvcnkgYW5kIGZldGNoZWQgZGF0YS5cblx0XHQgKiBAcGFyYW0ge1N0cmluZ30gY2F0ZWdvcnkgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGluZm8gY2F0ZWdvcnlcblx0XHQgKiBAcGFyYW0ge1N0cmluZ30gaW5mbyBcdEZldGNoZWQgaW5mbyBiYXNlZCBvbiBjYXRlZ29yeVxuXHRcdCAqIEByZXR1cm5zIHtOb2RlfVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGNyZWF0ZVN1YkluZm8oY2F0ZWdvcnksIGluZm8pIHtcblx0XHRcdC8vIElnbm9yZXMgdHYgc3ViaW5mbyB0byBiZSBkaXNwbGF5ZWQgaWYgaXQncyBhIG1vdmllIGFuZFxuXHRcdFx0Ly8gdmljZXZlcnNhXG5cdFx0XHRpZiAoIWluZm8pIHJldHVybiBudWxsO1xuXG5cdFx0XHRjb25zdCBzdWJJbmZvID0gcmVuZGVyRWxlbWVudChcImRpdlwiLCBcInN1Yi1pbmZvXCIpO1xuXHRcdFx0Y29uc3QgY2F0ZWdvcnlOYW1lID0gcmVuZGVyRWxlbWVudChcInNwYW5cIiwgXCJjYXRlZ29yeS1uYW1lXCIpO1xuXHRcdFx0Y29uc3QgY2F0ZWdvcnlJbmZvID0gcmVuZGVyRWxlbWVudChcInNwYW5cIiwgXCJjYXRlZ29yeS1pbmZvXCIpO1xuXG5cdFx0XHRjYXRlZ29yeU5hbWUudGV4dENvbnRlbnQgPSBjYXRlZ29yeTtcblx0XHRcdGNhdGVnb3J5SW5mby50ZXh0Q29udGVudCA9IGluZm87XG5cblx0XHRcdFtjYXRlZ29yeU5hbWUsIGNhdGVnb3J5SW5mb10uZm9yRWFjaCgoaW5mbykgPT5cblx0XHRcdFx0c3ViSW5mby5hcHBlbmRDaGlsZChpbmZvKVxuXHRcdFx0KTtcblx0XHRcdHJldHVybiBzdWJJbmZvO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvbnZlcnRNaW5Ub0hyKG1pbnMpIHtcblx0XHRcdGNvbnN0IGhvdXJzID0gbWlucyAvIDYwO1xuXHRcdFx0Y29uc3QgckhvdXJzID0gTWF0aC5mbG9vcihob3Vycyk7XG5cdFx0XHRjb25zdCBtaW51dGVzID0gKGhvdXJzIC0gckhvdXJzKSAqIDYwO1xuXHRcdFx0Y29uc3Qgck1pbnV0ZXMgPSBNYXRoLnJvdW5kKG1pbnV0ZXMpO1xuXHRcdFx0cmV0dXJuIGAke3JIb3Vyc31oICR7ck1pbnV0ZXN9bWluYDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29udGFpbmVyO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEcmF3IHN1bW1hcnkgaGVhZGluZyAoU3lub3BzaXMpXG5cdCAqIEByZXR1cm5zIHtWb2lkfVxuXHQgKi9cblx0Y29uc3QgZHJhd1N1bW1hcnlIZWFkaW5nID0gKCkgPT4ge1xuXHRcdGNvbnN0IGhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG5cdFx0aGVhZGluZy50ZXh0Q29udGVudCA9IFwiU3lub3BzaXM6IFwiO1xuXHRcdHJldHVybiBoZWFkaW5nO1xuXHR9O1xuXHQvKipcblx0ICogRHJhdyBzdW1tYXJ5IG9mIHNwZWNpZmllZCBtb3ZpZSAvIFRWIHNob3cuXG5cdCAqIEByZXR1cm5zIHtWb2lkfVxuXHQgKi9cblx0Y29uc3QgZHJhd1N1bW1hcnkgPSAoKSA9PiB7XG5cdFx0Y29uc3QgcGFyYSA9IHJlbmRlckVsZW1lbnQoXCJwXCIsIFwic3VtbWFyeVwiKTtcblx0XHRwYXJhLnRleHRDb250ZW50ID0gZGV0YWlscy5zdW1tYXJ5O1xuXHRcdHJldHVybiBwYXJhO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEcmF3LCBpZiBhbnksIGF2YWlhYmxlIHByb3ZpZGVycyAoc3RyZWFtaW5nLCBwdXJjaGFzZSwgcmVudCkuXG5cdCAqIEByZXR1cm5zIHtWb2lkfVxuXHQgKi9cblx0Y29uc3QgZHJhd1Byb3ZpZGVycyA9ICgpID0+IHtcblx0XHQvLyBCb29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZXJlIGFyZSBhbnkgd2F0Y2ggcHJvdmlkZXJzIGZvciBcblx0XHQvLyB0aGlzIHNob3cuXG5cdFx0bGV0IGF2YWlsUHJvdmlkZXJzOyBcblxuXHRcdC8vIEhvdXNlcyB0aGUgYnRuIHRoYXQgb3BlbnMgdGhlIG1vZGFsIGFuZCBvdmVybGF5LCBhbmQgdGhlIGF2YWlsYWJsZSBwcm92aWRlcnMgZm9yICdzdHJlYW1pbmcnLCAncmVudCcgYW5kICdwdXJjaGFzZScuXG5cdFx0Y29uc3QgcHJvdmlkZXJDb250YWluZXIgPSByZW5kZXJFbGVtZW50KFwiZGl2XCIsIFwicHJvdmlkZXItY29udGFpbmVyXCIpO1xuXHRcdGNvbnN0IGNvdW50cnlCdG4gPSByZW5kZXJFbGVtZW50KFwiYnV0dG9uXCIsIFwiY291bnRyeS1idG5cIik7XG5cdFx0Y29uc3QgaG91c2VDb250YWluZXIgPSByZW5kZXJFbGVtZW50KFwiZGl2XCIsIFwiaG91c2UtcHJvdmlkZXItY29udGFpbmVyXCIpO1xuXHRcdFtjb3VudHJ5QnRuLCBob3VzZUNvbnRhaW5lcl0uZm9yRWFjaCgoZWxlbSkgPT4ge1xuXHRcdFx0cHJvdmlkZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbSk7XG5cdFx0fSk7XG5cblx0XHQvLyBTZWFyY2ggZm9yIGRlZmF1bHQgY291bnRyeSBcIkF1c3RyYWxpYVwiLiBJZiBub25lIGZvdW5kLiBEcmF3IHRoZSBmaXJzdCBjb3VudHJ5J3MgcHJvdmlkZXIuXG5cdFx0aWYgKE9iamVjdC5rZXlzKHByb3ZpZGVycykubGVuZ3RoKSB7XG5cdFx0XHRhdmFpbFByb3ZpZGVycyA9IHRydWU7XG5cdFx0XHRpZiAoT2JqZWN0LmtleXMocHJvdmlkZXJzKS5pbmNsdWRlcyhcIkF1c3RyYWxpYVwiKSkge1xuXHRcdFx0XHQvLyBEcmF3IEF1cyBmbGFnIGluIGJ0bi5cblx0XHRcdFx0Y29uc3QgZmxhZyA9IHJlbmRlckVsZW1lbnQoXCJpbWdcIiwgXCJjb3VudHJ5LWZsYWdcIik7XG5cdFx0XHRcdGZsYWcuc2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIiwgXCJhbm9ueW1vdXNcIik7XG5cdFx0XHRcdGZsYWcuc3JjID0gYGh0dHBzOi8vY291bnRyeWZsYWdzYXBpLmNvbS9wbmcvQXVzdHJhbGlhYDtcblx0XHRcdFx0ZmxhZy5hbHQgPSBgQXVzdHJhbGlhIGZsYWdgO1xuXHRcdFx0XHRmbGFnLmNsYXNzTGlzdC5hZGQoXCJidG4tY291bnRyeS1mbGFnXCIpO1xuXHRcdFx0XHRkcmF3UHJvdmlkZXIoXCJBdXN0cmFsaWFcIik7XG5cdFx0XHRcdGNvdW50cnlCdG4udGV4dENvbnRlbnQgPSBcIkF1c3RyYWxpYVwiO1xuXHRcdFx0XHRjb3VudHJ5QnRuLmFwcGVuZENoaWxkKGZsYWcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRHJhdyBmaXJzdCBjb3VudHJ5J3MgZmxhZyBpbiBidG4uXG5cdFx0XHRcdGNvbnN0IGZpcnN0UHJvdmlkZXIgPSBPYmplY3Qua2V5cyhwcm92aWRlcnMpWzBdO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGNvbnN0IGZsYWcgPSByZW5kZXJFbGVtZW50KFwiaW1nXCIsIFwiY291bnRyeS1mbGFnXCIpO1xuXHRcdFx0XHRcdGZsYWcuc2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIiwgXCJhbm9ueW1vdXNcIik7XG5cdFx0XHRcdFx0ZmxhZy5zcmMgPSBgaHR0cHM6Ly9jb3VudHJ5ZmxhZ3NhcGkuY29tL3BuZy8ke2ZpcnN0UHJvdmlkZXJ9YDtcblx0XHRcdFx0XHRmbGFnLmFsdCA9IGAke2ZpcnN0UHJvdmlkZXJ9IGZsYWdgO1xuXHRcdFx0XHRcdGZsYWcuY2xhc3NMaXN0LmFkZChcImJ0bi1jb3VudHJ5LWZsYWdcIik7XG5cdFx0XHRcdFx0Y291bnRyeUJ0bi5hcHBlbmRDaGlsZChmbGFnKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkcmF3UHJvdmlkZXIoZmlyc3RQcm92aWRlcik7XG5cdFx0XHRcdGNvdW50cnlCdG4udGV4dENvbnRlbnQgPSBgJHtmaXJzdFByb3ZpZGVyfWA7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGF2YWlsUHJvdmlkZXJzID0gZmFsc2U7XG5cdFx0XHRjb3VudHJ5QnRuLnRleHRDb250ZW50ID1cblx0XHRcdFx0XCJObyBjb3VudHJpZXMgb2ZmZXIgdGhpcyB0di9tb3ZpZSBhdCB0aGUgbW9tZW50LlwiO1xuXHRcdFx0Y291bnRyeUJ0bi5jbGFzc0xpc3QuYWRkKFwibG9zdC1wcm92aWRlcnNcIik7XG5cdFx0XHRjb25zdCBsb3N0R2lmID0gcmVuZGVyRWxlbWVudChcImltZ1wiLCBcImxvc3QtZ2lmXCIpO1xuXHRcdFx0bG9zdEdpZi5zcmMgPSBcIi4vaW1nL2xvc3QtZ2lmLmdpZlwiO1xuXHRcdFx0bG9zdEdpZi5hbHQgPSBcIlByb3ZlciBjYW5ub3QgYmUgZm91bmQgcGljdHVyZS5cIjtcblx0XHRcdGhvdXNlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcblx0XHRcdGhvdXNlQ29udGFpbmVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcblx0XHRcdGhvdXNlQ29udGFpbmVyLmFwcGVuZENoaWxkKGxvc3RHaWYpO1xuXHRcdH1cblx0XHQvLyByZW5kZXIgZG93biBhcnJvdy5cblx0XHRjb25zdCBkb3duQXJyb3cgPSByZW5kZXJFbGVtZW50KFwiaVwiLCBcImZhc1wiKTtcblx0XHRkb3duQXJyb3cuY2xhc3NMaXN0LmFkZChcImZhLWFuZ2xlLWRvd25cIik7XG5cdFx0Y291bnRyeUJ0bi5hcHBlbmRDaGlsZChkb3duQXJyb3cpO1xuXG5cdFx0Ly8gYXZhaWxQcm92aWRlcnMgPyByZW5kZXJDb3VudHJpZXNNb2RhbChjb3VudHJ5QnRuLnRleHRDb250ZW50KSA6IFwiXCI7IC8vIHRlbXBcblx0XHQvLyBBZGQgYnRuIGV2ZW50IGNsaWNrIGxpc3RlbmVyIHRvIG9wZW4gbW9kYWxcblx0XHRjb3VudHJ5QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0aWYgKGF2YWlsUHJvdmlkZXJzKSB7XG5cdFx0XHRcdHJlbmRlckNvdW50cmllc01vZGFsKGNvdW50cnlCdG4udGV4dENvbnRlbnQpO1xuXHRcdFx0XHRoaWdobGlnaHRDdXJyQ291bnRyeShjb3VudHJ5QnRuLnRleHRDb250ZW50KTtcblx0XHRcdFx0Ly8gYWRkIGNvdW50cnkgZXZlbnQgaGVyZVxuXHRcdFx0XHRhcHBseUNob29zZUNvdW50cnlGbmNzKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0ZnVuY3Rpb24gYXBwbHlDaG9vc2VDb3VudHJ5Rm5jcygpIHtcblx0XHRcdGNvbnN0IGNvdW50cmllcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY291bnRyeS1jb250YWluZXJcIik7XG5cdFx0XHRjb3VudHJpZXMuZm9yRWFjaCgoY291bnRyeSkgPT5cblx0XHRcdFx0Y291bnRyeS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0aWYgKGNvdW50cnkubGFzdENoaWxkLnRleHRDb250ZW50KSB7XG5cdFx0XHRcdFx0XHRjb25zdCBzZWxlY3RlZENvdW50cnkgPSBjb3VudHJ5Lmxhc3RDaGlsZC50ZXh0Q29udGVudDtcblx0XHRcdFx0XHRcdGNsZWFyUHJvdmlkZXIoKTtcblx0XHRcdFx0XHRcdGRyYXdQcm92aWRlcihzZWxlY3RlZENvdW50cnkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLWNvdW50cnktY29udGFpbmVyXCIpLnJlbW92ZSgpO1xuXHRcdFx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmFjZS1tYXNrXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3ZpZGVyQ29udGFpbmVyO1xuXG5cdFx0ZnVuY3Rpb24gZHJhd1Byb3ZpZGVyKGNvdW50cnlOYW1lID0gXCJBdXN0cmFsaWFcIikge1xuXHRcdFx0Ly8gQ2hhbmdlIHRleHQgb2YgYnRuIHRvIGNvdW50cnlOYW1lXG5cdFx0XHRjb3VudHJ5QnRuLnRleHRDb250ZW50ID0gY291bnRyeU5hbWU7XG5cblx0XHRcdC8vIEFkZCBhcnJvd3MgYW5kIGZsYWdzIGludG8gYnRuIGFmdGVyIGV2ZXJ5IHNlbGVjdGlvbi5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IGZsYWcgPSByZW5kZXJFbGVtZW50KFwiaW1nXCIsIFwiY291bnRyeS1mbGFnXCIpO1xuXHRcdFx0XHRmbGFnLnNldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIsIFwiYW5vbnltb3VzXCIpO1xuXHRcdFx0XHRmbGFnLnNyYyA9IGBodHRwczovL2NvdW50cnlmbGFnc2FwaS5jb20vcG5nLyR7Y291bnRyeU5hbWV9YDtcblx0XHRcdFx0ZmxhZy5hbHQgPSBgJHtjb3VudHJ5TmFtZX0gZmxhZ2A7XG5cdFx0XHRcdGZsYWcuY2xhc3NMaXN0LmFkZChcImJ0bi1jb3VudHJ5LWZsYWdcIik7XG5cdFx0XHRcdGNvdW50cnlCdG4uYXBwZW5kQ2hpbGQoZmxhZyk7XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGRvd25BcnJvdyA9IHJlbmRlckVsZW1lbnQoXCJpXCIsIFwiZmFzXCIpO1xuXHRcdFx0ZG93bkFycm93LmNsYXNzTGlzdC5hZGQoXCJmYS1hbmdsZS1kb3duXCIpO1xuXHRcdFx0Y291bnRyeUJ0bi5hcHBlbmRDaGlsZChkb3duQXJyb3cpO1xuXG5cdFx0XHRjb25zdCBzdHJlYW1JbmZvID0gcHJvdmlkZXJzW2NvdW50cnlOYW1lXS5zdHJlYW07XG5cdFx0XHRjb25zdCBidXlJbmZvID0gcHJvdmlkZXJzW2NvdW50cnlOYW1lXS5idXk7XG5cdFx0XHRjb25zdCByZW50SW5mbyA9IHByb3ZpZGVyc1tjb3VudHJ5TmFtZV0ucmVudDtcblxuXHRcdFx0Y29uc3Qgc2VydmljZU5hbWVzID0gW1wiU3RyZWFtIGF0OlwiLCBcIlB1cmNoYXNlIGF0OlwiLCBcIlJlbnQgYXQ6XCJdO1xuXHRcdFx0Ly8gVG8gYXNzaWduIG5hbWVzIGZvciBlYWNoIHNldmljZSBwcm92aWRlcnMuXG5cdFx0XHQvLyBUaGlzIGluY3JlbWVudHMgYXMgcHJvdmlkZXJzIGFyZSBsaXN0ZWQgZm9yIGVhY2ggc2VydmljZS5cblx0XHRcdGxldCBpZHggPSAwO1xuXG5cdFx0XHRbc3RyZWFtSW5mbywgYnV5SW5mbywgcmVudEluZm9dLmZvckVhY2goKGluZm8pID0+IHtcblx0XHRcdFx0Y29uc3Qgc2VydmljZUNvbnRhaW5lciA9IHJlbmRlckVsZW1lbnQoXG5cdFx0XHRcdFx0XCJkaXZcIixcblx0XHRcdFx0XHRcInNlcnZpY2UtY29udGFpbmVyXCJcblx0XHRcdFx0KTtcblx0XHRcdFx0Y29uc3Qgc2VydmljZU5hbWUgPSByZW5kZXJFbGVtZW50KFwiZGl2XCIsIFwic2VydmljZS1uYW1lXCIpO1xuXHRcdFx0XHRjb25zdCBzZXJ2aWNlTmFtZUJvbGQgPSByZW5kZXJFbGVtZW50KFxuXHRcdFx0XHRcdFwiaDJcIixcblx0XHRcdFx0XHRcInNlcnZpY2UtbmFtZS1ib2xkXCJcblx0XHRcdFx0KTtcblx0XHRcdFx0Y29uc3QgcHJvdmlkZXJTZXJ2aWNlQ29udGFpbmVyID0gcmVuZGVyRWxlbWVudChcblx0XHRcdFx0XHRcImRpdlwiLFxuXHRcdFx0XHRcdFwicHJvdmlkZXItc2VydmljZS1jb250YWluZXJcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGluZm8uZm9yRWFjaCgocHJvdmlkZXIpID0+IHtcblx0XHRcdFx0XHRjb25zdCBwcm92aWRlclNlcnZpY2UgPSByZW5kZXJFbGVtZW50KFxuXHRcdFx0XHRcdFx0XCJkaXZcIixcblx0XHRcdFx0XHRcdFwicHJvdmlkZXItc2VydmljZVwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHQvLyBBZGQgaW1nIGFuZCBuYW1lIG9mIHByb3ZpZGVyLlxuXHRcdFx0XHRcdGNvbnN0IHByb3ZpZGVySW1nID0gcmVuZGVyRWxlbWVudChcImltZ1wiLCBcInByb3ZpZGVyLWltZ1wiKTtcblx0XHRcdFx0XHRjb25zdCBwcm92aWRlck5hbWUgPSByZW5kZXJFbGVtZW50KFwic3BhblwiLCBcInByb3ZpZGVyLW5hbWVcIik7XG5cblx0XHRcdFx0XHRpZiAocHJvdmlkZXIucHJvdmlkZXJfbG9nb19wYXRoKSB7XG5cdFx0XHRcdFx0XHRwcm92aWRlckltZy5zcmMgPSBgaHR0cHM6Ly9pbWFnZS50bWRiLm9yZy90L3Avb3JpZ2luYWwvJHtwcm92aWRlci5wcm92aWRlcl9sb2dvX3BhdGh9YDtcblx0XHRcdFx0XHRcdHByb3ZpZGVySW1nLmFsdCA9IGAke3Byb3ZpZGVyLnByb3ZpZGVyX25hbWV9IHBpY3R1cmUuYDtcblx0XHRcdFx0XHRcdHByb3ZpZGVySW1nLnNldEF0dHJpYnV0ZShcImxvYWRpbmdcIiwgXCJsYXp5XCIpO1xuXHRcdFx0XHRcdFx0cHJvdmlkZXJOYW1lLnRleHRDb250ZW50ID0gcHJvdmlkZXIucHJvdmlkZXJfbmFtZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRbcHJvdmlkZXJJbWcsIHByb3ZpZGVyTmFtZV0uZm9yRWFjaCgoZWxlbSkgPT4ge1xuXHRcdFx0XHRcdFx0cHJvdmlkZXJTZXJ2aWNlLmFwcGVuZENoaWxkKGVsZW0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHByb3ZpZGVyU2VydmljZUNvbnRhaW5lci5hcHBlbmRDaGlsZChwcm92aWRlclNlcnZpY2UpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZiAoaW5mby5sZW5ndGgpIHtcblx0XHRcdFx0XHRzZXJ2aWNlTmFtZUJvbGQudGV4dENvbnRlbnQgPSBgJHtzZXJ2aWNlTmFtZXNbaWR4XX1gO1xuXHRcdFx0XHRcdHNlcnZpY2VOYW1lLmFwcGVuZENoaWxkKHNlcnZpY2VOYW1lQm9sZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWR4Kys7XG5cdFx0XHRcdHNlcnZpY2VDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VydmljZU5hbWUpO1xuXHRcdFx0XHRzZXJ2aWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKHByb3ZpZGVyU2VydmljZUNvbnRhaW5lcik7XG5cdFx0XHRcdGhvdXNlQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlcnZpY2VDb250YWluZXIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIGNsZWFyUHJvdmlkZXIoKSB7XG5cdFx0XHRob3VzZUNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdH1cblx0fTtcblxuXHRjb25zdCBkcmF3UmV2aWV3cyA9ICgpID0+IHtcblx0XHRpZiAoIXJldmlld3MpIHJldHVybjtcblx0XHRjb25zdCByZXZpZXdDb250YWluZXIgPSByZW5kZXJFbGVtZW50KFwiZGl2XCIsIFwicmV2aWV3LWNvbnRhaW5lclwiKTtcblx0XHRjb25zdCB0aXRsZSA9IHJlbmRlckVsZW1lbnQoXCJoMlwiLCBcInJldmlldy10aXRsZVwiKTtcblx0XHR0aXRsZS50ZXh0Q29udGVudCA9IFwiUmV2aWV3czpcIjtcblx0XHRyZXZpZXdDb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG5cdFx0cmV2aWV3cy5mb3JFYWNoKChyZXZpZXcpID0+IGRyYXdSZXZpZXcocmV2aWV3LCByZXZpZXdDb250YWluZXIpKTtcblx0XHRyZXR1cm4gcmV2aWV3Q29udGFpbmVyO1xuXHR9O1xuXG5cdGNvbnN0IGRyYXdSZXZpZXcgPSAocmV2aWV3LCBjb250YWluZXIpID0+IHtcblx0XHRjb25zdCByZW5kZXJSZXZpZXdIZWFkaW5nID0gKCkgPT4ge1xuXHRcdFx0Y29uc3QgcmV2aWV3SGVhZGluZyA9IHJlbmRlckVsZW1lbnQoXCJkaXZcIiwgXCJyZXZpZXctaGVhZGluZ1wiKTtcblx0XHRcdC8vIFJlbmRlciBhdXRob3IncyBwcm9maWxlIHBpYyBpZiBhbnkuXG5cdFx0XHRpZiAocmV2aWV3LnBpY19wYXRoKSB7XG5cdFx0XHRcdGNvbnN0IGF1dGhvclBpYyA9IHJlbmRlckVsZW1lbnQoXCJpbWdcIiwgXCJhdXRob3ItcGljXCIpO1xuXHRcdFx0XHRpZiAocmV2aWV3LnBpY19wYXRoLnNsaWNlKDEsIDUpICE9PSBcImh0dHBcIikge1xuXHRcdFx0XHRcdGF1dGhvclBpYy5zcmMgPSBgaHR0cHM6Ly9pbWFnZS50bWRiLm9yZy90L3AvdzMwMC8ke3Jldmlldy5waWNfcGF0aH1gO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGF1dGhvclBpYy5zcmMgPSByZXZpZXcucGljX3BhdGguc2xpY2UoMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhdXRob3JQaWMuYWx0ID0gYCR7cmV2aWV3LmF1dGhvcn0gcHJvZmlsZSBwaWN0dXJlLmA7XG5cdFx0XHRcdHJldmlld0hlYWRpbmcuYXBwZW5kQ2hpbGQoYXV0aG9yUGljKTtcblx0XHRcdH1cblxuXHRcdFx0YWRkUmV2SW5mbyhyZXZpZXcuYXV0aG9yLCByZXZpZXdIZWFkaW5nLCBcImgzXCIsIFwicmV2aWV3LWF1dGhvclwiKTtcblxuXHRcdFx0YWRkUmV2SW5mbyhyZXZpZXcucmF0aW5nLCByZXZpZXdIZWFkaW5nLCBcInNwYW5cIiwgXCJyZXZpZXctcmF0aW5nXCIpO1xuXG5cdFx0XHRyZXR1cm4gcmV2aWV3SGVhZGluZztcblx0XHR9O1xuXG5cdFx0Y29uc3QgcmVuZGVyUmV2aWV3Qm9keSA9ICgpID0+IHtcblx0XHRcdGNvbnN0IHJldmlld0NvbnRlbnQgPSByZW5kZXJFbGVtZW50KFwicFwiLCBcInJldmlldy1jb250ZW50XCIpO1xuXHRcdFx0cmV2aWV3Q29udGVudC50ZXh0Q29udGVudCA9IGBcIiR7cmV2aWV3LmNvbnRlbnR9XCJgO1xuXHRcdFx0cmV0dXJuIHJldmlld0NvbnRlbnQ7XG5cdFx0fTtcblxuXHRcdGNvbnN0IHJlbmRlclJldmlld0Zvb3RlciA9ICgpID0+IHtcblx0XHRcdGNvbnN0IHJldmlld0Zvb3RlciA9IHJlbmRlckVsZW1lbnQoXCJkaXZcIiwgXCJyZXZpZXctZm9vdGVyXCIpO1xuXHRcdFx0Y29uc3QgcmV2aWV3VXJsID0gcmVuZGVyRWxlbWVudChcImFcIiwgXCJyZXZpZXctbGlua1wiKTtcblx0XHRcdGNvbnN0IHJldmlld1VwZGF0ZWQgPSByZW5kZXJFbGVtZW50KFwic3BhblwiLCBcInJldmlldy11cGRhdGVkXCIpO1xuXG5cdFx0XHRyZXZpZXdVcmwuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBgJHtyZXZpZXcudXJsfWApO1xuXHRcdFx0cmV2aWV3VXJsLnNldEF0dHJpYnV0ZShcInRhcmdldFwiLCBcIl9ibGFua1wiKTtcblx0XHRcdHJldmlld1VybC50ZXh0Q29udGVudCA9IFwiQ2xpY2sgZm9yIHJldmlldyBsaW5rXCI7XG5cblx0XHRcdHJldmlld1VwZGF0ZWQudGV4dENvbnRlbnQgPSBgTGFzdCB1cGRhdGVkOiAke2Zvcm1hdFJldkRhdGUoXG5cdFx0XHRcdHJldmlldy5sYXN0X3VwZGF0ZWRcblx0XHRcdCl9YDtcblxuXHRcdFx0cmV2aWV3Rm9vdGVyLmFwcGVuZENoaWxkKHJldmlld1VybCk7XG5cdFx0XHRyZXZpZXdGb290ZXIuYXBwZW5kQ2hpbGQocmV2aWV3VXBkYXRlZCk7XG5cblx0XHRcdHJldHVybiByZXZpZXdGb290ZXI7XG5cdFx0XHRmdW5jdGlvbiBmb3JtYXRSZXZEYXRlKGRhdGUpIHtcblx0XHRcdFx0ZGF0ZSA9IGRhdGUuc3BsaXQoXCItXCIpO1xuXHRcdFx0XHRkYXRlWzJdID0gZGF0ZVsyXS5zbGljZSgwLCAyKSArIFwiL1wiO1xuXHRcdFx0XHRyZXR1cm4gZGF0ZVsyXS5jb25jYXQoZGF0ZS5zbGljZSgwLCAyKS5yZXZlcnNlKCkuam9pbihcIi9cIikpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyUmV2aWV3SGVhZGluZygpKTtcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyUmV2aWV3Qm9keSgpKTtcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyUmV2aWV3Rm9vdGVyKCkpO1xuXG5cdFx0Ly8gSGVscGVyIGZuYyB0aGF0IGNvbGxlY3RzIGNvcnJlc3BvbmRpbmcgaW5mbyBhbmRcblx0XHQvLyBjcmVhdGVzIGEgc3Bhbi9kaXYgY29udGFpbmVyIGlmIGluZm8gZXhpc3RzLiBPdGhlcndpc2UsIHJldHVybjtcblx0XHRmdW5jdGlvbiBhZGRSZXZJbmZvKGluZm8sIGNvbnRhaW5lciwgdGFnLCBjbGFzc05hbWUpIHtcblx0XHRcdGNvbnN0IGluZm9Db250YWluZXIgPSByZW5kZXJFbGVtZW50KHRhZywgY2xhc3NOYW1lKTtcblx0XHRcdGlmIChpbmZvKSB7XG5cdFx0XHRcdGluZm9Db250YWluZXIudGV4dENvbnRlbnQgPSBpbmZvO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZpZXdzIG91dCBvZiAxMFxuXHRcdFx0aWYgKGluZm8gPT09IHJldmlldy5yYXRpbmcpIHtcblx0XHRcdFx0aW5mb0NvbnRhaW5lci50ZXh0Q29udGVudCA9IHJldmlldy5yYXRpbmdcblx0XHRcdFx0XHQ/IGAke2luZm99LzEwYFxuXHRcdFx0XHRcdDogXCJSYXRpbmcgbm90IHByb3ZpZGVkLi5cIjtcblx0XHRcdH1cblx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvQ29udGFpbmVyKTtcblx0XHR9XG5cdH07XG5cblx0Y29uc3QgZHJhd1RyYWlsZXIgPSAoKSA9PiB7XG5cdFx0Y29uc3QgdHJhaWxlckNvbnRhaW5lciA9IHJlbmRlckVsZW1lbnQoXCJkaXZcIiwgXCJ0cmFpbGVyLWNvbnRhaW5lclwiKTtcblx0XHRjb25zdCB0cmFpbGVySGVhZGluZyA9IHJlbmRlckVsZW1lbnQoXCJkaXZcIiwgXCJ0cmFpbGVyLWhlYWRpbmdcIik7XG5cblx0XHRpZiAodHJhaWxlcikge1xuXHRcdFx0cmVuZGVyVHJhaWxlckhlYWRpbmcoKS5mb3JFYWNoKChlbGVtKSA9PlxuXHRcdFx0XHR0cmFpbGVySGVhZGluZy5hcHBlbmRDaGlsZChlbGVtKVxuXHRcdFx0KTtcblx0XHRcdHRyYWlsZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodHJhaWxlckhlYWRpbmcpO1xuXHRcdFx0Y29uc3QgdmlkZW9XcmFwcGVyID0gcmVuZGVyRWxlbWVudChcImRpdlwiLCBcInZpZGVvLXdyYXBwZXJcIik7XG5cdFx0XHR2aWRlb1dyYXBwZXIuYXBwZW5kQ2hpbGQoYWRkVmlkZW8odHJhaWxlci5rZXksIHRyYWlsZXIuc2l0ZSkpO1xuXHRcdFx0dHJhaWxlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh2aWRlb1dyYXBwZXIpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJhaWxlckNvbnRhaW5lcjtcblxuXHRcdGZ1bmN0aW9uIHJlbmRlclRyYWlsZXJIZWFkaW5nKCkge1xuXHRcdFx0Y29uc3QgdHJhaWxlck5hbWUgPSByZW5kZXJFbGVtZW50KFwiaDJcIiwgXCJ0cmFpbGVyLW5hbWVcIik7XG5cdFx0XHRjb25zdCB0cmFpbGVyTGFuZ3VhZ2UgPSByZW5kZXJFbGVtZW50KFwiaDNcIiwgXCJ0cmFpbGVyLWxhbmdcIik7XG5cdFx0XHR0cmFpbGVyTmFtZS50ZXh0Q29udGVudCA9IGAke3RyYWlsZXIudE5hbWV9YDtcblx0XHRcdHRyYWlsZXJMYW5ndWFnZS50ZXh0Q29udGVudCA9IGBMYW5ndWFnZTogJHt0cmFpbGVyLmxhbmd9YDtcblxuXHRcdFx0cmV0dXJuIFt0cmFpbGVyTmFtZSwgdHJhaWxlckxhbmd1YWdlXTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRWaWRlbyhrZXksIHNpdGUpIHtcblx0XHRcdGNvbnN0IGZyYW1lID0gcmVuZGVyRWxlbWVudChcImlmcmFtZVwiLCBcInRyYWlsZXItdmlkZW9cIik7XG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVzID0ge1xuXHRcdFx0XHRsb2FkaW5nOiBcImxhenlcIixcblx0XHRcdFx0d2lkdGg6IFwiNTYwXCIsXG5cdFx0XHRcdGhlaWdodDogXCIzMTVcIixcblx0XHRcdFx0c3JjOiBgaHR0cHM6Ly95b3V0dWJlLmNvbS9lbWJlZC8ke2tleX1gLFxuXHRcdFx0XHR0aXRsZTogYCR7c2l0ZX0gdmlkZW8gcGxheWVyYCxcblx0XHRcdFx0ZnJhbWVib3JkZXI6IFwiMFwiLFxuXHRcdFx0XHRhbGxvdzogXCJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQgbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlOyB3ZWItc2hhcmVcIixcblx0XHRcdH07XG5cdFx0XHRmb3IgKGxldCBhdHRyIGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0ZnJhbWUuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJpYnV0ZXNbYXR0cl0pO1xuXHRcdFx0XHRmcmFtZS5zZXRBdHRyaWJ1dGUoXCJhbGxvd2Z1bGxzY3JlZW5cIiwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZnJhbWU7XG5cdFx0fVxuXHR9O1xuXHRjb25zdCBkcmF3UmVjcyA9ICgpID0+IHtcblx0XHRjb25zdCByZWNzQ29udGFpbmVyID0gcmVuZGVyRWxlbWVudChcImRpdlwiLCBcInJlY3MtY29udGFpbmVyXCIpO1xuXHRcdGlmIChPYmplY3Qua2V5cyhyZWNzKS5sZW5ndGggPT09IDApIHtcblx0XHRcdGNvbnN0IG5vbmVNc2cgPSByZW5kZXJFbGVtZW50KFwiaDRcIiwgXCJuby1yZXZpZXctbXNnXCIpO1xuXHRcdFx0bm9uZU1zZy50ZXh0Q29udGVudCA9IFwiTm8gcmVjb21tZW5kYXRpb25zIGZvdW5kLlwiO1xuXHRcdFx0cmVjc0NvbnRhaW5lci5hcHBlbmRDaGlsZChub25lTXNnKTtcblx0XHRcdHJlY3NDb250YWluZXIuc3R5bGUgPSBcImRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogY2VudGVyO1wiO1xuXHRcdFx0cmV0dXJuIHJlY3NDb250YWluZXI7XG5cdFx0fVxuXHRcdGZvciAobGV0IHJlYyBpbiByZWNzKSB7XG5cdFx0XHRyZWNzQ29udGFpbmVyLmFwcGVuZENoaWxkKGRyYXdSZWMocmVjc1tyZWNdKSk7XG5cdFx0fVxuXHRcdHJldHVybiByZWNzQ29udGFpbmVyO1xuXHR9O1xuXG5cdGNvbnN0IGRyYXdSZWMgPSAocmVjKSA9PiB7XG5cdFx0Y29uc3QgcmVjQ29udGFpbmVyID0gcmVuZGVyRWxlbWVudChcImRpdlwiLCBcInJlYy1jb250YWluZXJcIik7XG5cdFx0Y29uc3QgcmVjUG9zdGVyID0gcmVuZGVyRWxlbWVudChcImltZ1wiLCBcInJlYy1wb3N0ZXJcIik7XG5cdFx0Y29uc3QgaW5mbyA9IHJlbmRlckVsZW1lbnQoXCJkaXZcIiwgXCJyZWMtaW5mb1wiKTtcblxuXHRcdHJlY1Bvc3Rlci5zcmMgPSBgaHR0cHM6Ly9pbWFnZS50bWRiLm9yZy90L3AvdzMwMC8ke3JlYy5wb3N0ZXJfcGF0aH1gO1xuXG5cdFx0cmVjQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlY1Bvc3Rlcik7XG5cdFx0cmVuZGVySW5mbyhyZWMpLmZvckVhY2goKHN1YkluZm8pID0+IGluZm8uYXBwZW5kQ2hpbGQoc3ViSW5mbykpO1xuXG5cdFx0Y29uc3QgcmVjTGluayA9IHJlbmRlckVsZW1lbnQoXCJhXCIsIFwicmVjLWxpbmtcIik7XG5cdFx0Y29uc3QgbWVkaWFUeXBlID0gcmVjLnROYW1lID8gXCJUViBTaG93XCIgOiBcIk1vdmllXCI7XG5cdFx0cmVjTGluay50ZXh0Q29udGVudCA9IGBTZWFyY2ggZm9yIHRoaXMgJHttZWRpYVR5cGV9IC0+IGA7XG5cdFx0cmVjTGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHBhZ2UuY2xlYXJTZWN0aW9ucygpO1xuXHRcdFx0cmVjLnROYW1lXG5cdFx0XHRcdD8gYXdhaXQgcGFnZS5kcmF3U2VjdGlvbnMocmVjLnROYW1lKVxuXHRcdFx0XHQ6IGF3YWl0IHBhZ2UuZHJhd1NlY3Rpb25zKHJlYy5tTmFtZSk7XG5cdFx0fSk7XG5cblx0XHRpbmZvLmFwcGVuZENoaWxkKHJlY0xpbmspO1xuXHRcdHJlY0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvKTtcblx0XHRyZXR1cm4gcmVjQ29udGFpbmVyO1xuXG5cdFx0ZnVuY3Rpb24gcmVuZGVySW5mbyhzdWJJbmZvKSB7XG5cdFx0XHRpZiAoc3ViSW5mbykge1xuXHRcdFx0XHQvLyBJZiBpbmZvIGV4aXN0cy5cblx0XHRcdFx0Y29uc3QgcmVjTmFtZSA9IHJlbmRlckVsZW1lbnQoXCJwXCIsIFwicmVjLW5hbWVcIik7XG5cdFx0XHRcdGNvbnN0IHJlY0RhdGUgPSByZW5kZXJFbGVtZW50KFwicFwiLCBcInJlYy1kYXRlXCIpO1xuXHRcdFx0XHRjb25zdCB2b3RlQ291bnQgPSByZW5kZXJFbGVtZW50KFwicFwiLCBcInJlYy12b3RlLWNvdW50XCIpO1xuXHRcdFx0XHRjb25zdCB2b3RlQXZnID0gcmVuZGVyRWxlbWVudChcInBcIiwgXCJyZWMtdm90ZS1hdmdcIik7XG5cblx0XHRcdFx0cmVjTmFtZS50ZXh0Q29udGVudCA9IHN1YkluZm8udE5hbWVcblx0XHRcdFx0XHQ/IGBOYW1lOiAke3N1YkluZm8udE5hbWV9YFxuXHRcdFx0XHRcdDogYE5hbWU6ICR7c3ViSW5mby5tTmFtZX1gO1xuXHRcdFx0XHRyZWNEYXRlLnRleHRDb250ZW50ID0gc3ViSW5mby5maXJzdF9haXJfZGF0ZVxuXHRcdFx0XHRcdD8gYEZpcnN0IEFpciBEYXRlOiAke3N1YkluZm8uZmlyc3RfYWlyX2RhdGV9YFxuXHRcdFx0XHRcdDogYFJlbGVhc2UgRGF0ZTogJHtzdWJJbmZvLnJlbGVhc2VfZGF0ZX1gO1xuXHRcdFx0XHR2b3RlQ291bnQudGV4dENvbnRlbnQgPSBgVm90ZSBDb3VudDogJHtzdWJJbmZvLnZvdGVfY291bnR9YDtcblx0XHRcdFx0dm90ZUF2Zy50ZXh0Q29udGVudCA9IGBWb3RlIEF2ZzogJHtzdWJJbmZvLnZvdGVfYXZlcmFnZX1gO1xuXG5cdFx0XHRcdHJldHVybiBbcmVjTmFtZSwgcmVjRGF0ZSwgdm90ZUNvdW50LCB2b3RlQXZnXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gcmVuZGVyQ291bnRyaWVzTW9kYWwoY3VyckNvdW50cnlOYW1lKSB7XG5cdFx0Ly8gQ291bnRyeSBuYW1lc1xuXHRcdGNvbnN0IHByb3ZpZGVyQ291bnRyaWVzID0gT2JqZWN0LmtleXMocHJvdmlkZXJzKTtcblx0XHQvLyBTb3J0IGJ5IGNvdW50cnkgbmFtZSBhbmQgY29kZXMgaW50byBhbiBvYmouXG5cdFx0bGV0IGNvdW50cmllcyA9IHt9O1xuXHRcdGxldCBjdXJyQ291bnRyeUNvZGU7XG5cdFx0cHJvdmlkZXJDb3VudHJpZXMuZm9yRWFjaCgoY291bnRyeSkgPT4ge1xuXHRcdFx0Y291bnRyaWVzW2NvdW50cnldID0gcHJvdmlkZXJzW2NvdW50cnldLmNvdW50cnlDb2RlO1xuXG5cdFx0XHQvLyBGaW5kIGN1cnJlbnQgY291bnRyeSBjb2RlLlxuXHRcdFx0aWYgKGN1cnJDb3VudHJ5TmFtZSA9PT0gY291bnRyeSkge1xuXHRcdFx0XHRjdXJyQ291bnRyeUNvZGUgPSBwcm92aWRlcnNbY291bnRyeV0uY291bnRyeUNvZGU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRjb25zdCBtb2RhbENvbnRhaW5lciA9IHJlbmRlckVsZW1lbnQoXCJmb3JtXCIsIFwibW9kYWwtY291bnRyeS1jb250YWluZXJcIik7XG5cdFx0Y29uc3QgbW9kYWxIZWFkZXIgPSByZW5kZXJFbGVtZW50KFwiZGl2XCIsIFwibW9kYWwtaGVhZGVyXCIpO1xuXG5cdFx0Y29uc3QgbW9kYWxCb2R5ID0gcmVuZGVyRWxlbWVudChcImRpdlwiLCBcIm1vZGFsLWJvZHlcIik7XG5cdFx0Y29uc3QgbW9kYWxDdXJyZW50Q291bnRyeSA9IHJlbmRlckVsZW1lbnQoXG5cdFx0XHRcImRpdlwiLFxuXHRcdFx0XCJtb2RhbC1jdXJyZW50LWNvdW50cnlcIlxuXHRcdCk7XG5cdFx0Y29uc3QgbW9kYWxJbnB1dFNlYXJjaCA9IHJlbmRlckVsZW1lbnQoXCJpbnB1dFwiLCBcIm1vZGFsLWlucHV0LXNlYXJjaFwiKTtcblx0XHRjb25zdCBtb2RhbExpc3RDb3VudHJpZXMgPSByZW5kZXJFbGVtZW50KFwidWxcIiwgXCJtb2RhbC1saXN0LWNvdW50cmllc1wiKTtcblxuXHRcdGNvbnN0IG1vZGFsQ2xvc2VCdG4gPSByZW5kZXJFbGVtZW50KFwiYnV0dG9uXCIsIFwibW9kYWwtY2xvc2UtYnRuXCIpO1xuXG5cdFx0Y29uc3QgcmVuZGVySGVhZGluZyA9ICgpID0+IHtcblx0XHRcdC8vIEhlYWRpbmcgdGhhdCBkaXNwbGF5cyBjdXJyZW50IGNvdW50cnkgc2VsZWN0ZWQuXG5cdFx0XHRjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuXHRcdFx0aGVhZGluZy50ZXh0Q29udGVudCA9IFwiQ291bnRyaWVzXCI7XG5cblx0XHRcdGNvbnN0IGN1cnJDb3VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuXHRcdFx0Y29uc3Qgc2VhcmNoTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG5cblx0XHRcdGNvbnN0IHNlYXJjaEF0dHJpYnV0ZXMgPSB7XG5cdFx0XHRcdGlkOiBcIm1vZGFsLWlucHV0LXNlYXJjaFwiLFxuXHRcdFx0XHR0eXBlOiBcInNlYXJjaFwiLFxuXHRcdFx0XHRwbGFjZWhvbGRlcjogXCLwn5SNIFNlYXJjaCBmb3IgY291bnRyaWVzLi4uXCIsXG5cdFx0XHRcdHRpdGxlOiBcIlR5cGUgaW4gYSBjb3VudHJ5IG5hbWVcIixcblx0XHRcdFx0cm9sZTogXCJzZWFyY2hcIixcblx0XHRcdH07XG5cblx0XHRcdGZvciAobGV0IGkgaW4gc2VhcmNoQXR0cmlidXRlcykge1xuXHRcdFx0XHRtb2RhbElucHV0U2VhcmNoLnNldEF0dHJpYnV0ZShpLCBzZWFyY2hBdHRyaWJ1dGVzW2ldKTtcblx0XHRcdH1cblx0XHRcdG1vZGFsSW5wdXRTZWFyY2guYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZpbHRlclJlc3VsdHMpO1xuXHRcdFx0bW9kYWxJbnB1dFNlYXJjaC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBGaW5kIGN1cnJlbnQgY291bnRyeSBuYW1lIGFuZCBjb2RlLlxuXHRcdFx0Y29uc3QgY3VyckNvdW50cnlGbGFnID0gcmVuZGVyQ291bnRyeUZsYWcoXG5cdFx0XHRcdGN1cnJDb3VudHJ5Q29kZSxcblx0XHRcdFx0Y3VyckNvdW50cnlOYW1lXG5cdFx0XHQpO1xuXHRcdFx0Y3VyckNvdW50cnkudGV4dENvbnRlbnQgPSBjdXJyQ291bnRyeU5hbWU7XG5cblx0XHRcdG1vZGFsQ3VycmVudENvdW50cnkuYXBwZW5kQ2hpbGQoY3VyckNvdW50cnlGbGFnKTtcblx0XHRcdG1vZGFsQ3VycmVudENvdW50cnkuYXBwZW5kQ2hpbGQoY3VyckNvdW50cnkpO1xuXG5cdFx0XHRzZWFyY2hMYWJlbC5odG1sRm9yID0gYCR7bW9kYWxJbnB1dFNlYXJjaC5pZH1gO1xuXG5cdFx0XHRbXG5cdFx0XHRcdGhlYWRpbmcsXG5cdFx0XHRcdG1vZGFsQ3VycmVudENvdW50cnksXG5cdFx0XHRcdHNlYXJjaExhYmVsLFxuXHRcdFx0XHRtb2RhbElucHV0U2VhcmNoLFxuXHRcdFx0XS5mb3JFYWNoKChmb3JtRWxlbSkgPT4ge1xuXHRcdFx0XHRtb2RhbEhlYWRlci5hcHBlbmRDaGlsZChmb3JtRWxlbSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgcmVuZGVyQm9keSA9ICgpID0+IHtcblx0XHRcdG1vZGFsTGlzdENvdW50cmllcy5pZCA9IFwiY291bnRyaWVzLWxpc3RcIjtcblx0XHRcdGZvciAobGV0IGNvdW50cnkgaW4gY291bnRyaWVzKSB7XG5cdFx0XHRcdGxldCBjb3VudHJ5Q29kZSA9IGNvdW50cmllc1tjb3VudHJ5XTtcblxuXHRcdFx0XHRjb25zdCBjb3VudHJ5Q29udGFpbmVyID0gcmVuZGVyRWxlbWVudChcblx0XHRcdFx0XHRcImxpXCIsXG5cdFx0XHRcdFx0XCJjb3VudHJ5LWNvbnRhaW5lclwiXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNvbnN0IGNvdW50cnlGbGFnID0gcmVuZGVyQ291bnRyeUZsYWcoY291bnRyeUNvZGUsIGNvdW50cnkpO1xuXHRcdFx0XHRjb25zdCBjb3VudHJ5TmFtZSA9IHJlbmRlckVsZW1lbnQoXCJhXCIsIFwiY291bnRyeS1uYW1lXCIpO1xuXG5cdFx0XHRcdGNvdW50cnlOYW1lLnRleHRDb250ZW50ID0gY291bnRyeTtcblx0XHRcdFx0Y291bnRyeU5hbWUuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcIiNcIik7XG5cblx0XHRcdFx0W2NvdW50cnlGbGFnLCBjb3VudHJ5TmFtZV0uZm9yRWFjaCgoY291bnRyeUVsZW0pID0+IHtcblx0XHRcdFx0XHRjb3VudHJ5Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvdW50cnlFbGVtKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0bW9kYWxMaXN0Q291bnRyaWVzLmFwcGVuZENoaWxkKGNvdW50cnlDb250YWluZXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRbbW9kYWxMaXN0Q291bnRyaWVzXS5mb3JFYWNoKChmb3JtRWxlbSkgPT4ge1xuXHRcdFx0XHRtb2RhbEJvZHkuYXBwZW5kQ2hpbGQoZm9ybUVsZW0pO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdGNvbnN0IHJlbmRlckNsb3NlQnRuID0gKGNsb3NlRm5jKSA9PiB7XG5cdFx0XHRjb25zdCBjbG9zZVN5bWIgPSByZW5kZXJFbGVtZW50KFwiaVwiLCBcImZhXCIpO1xuXHRcdFx0Y2xvc2VTeW1iLmNsYXNzTGlzdC5hZGQoXCJmYS1jbG9zZVwiKTtcblx0XHRcdG1vZGFsQ2xvc2VCdG4uYXBwZW5kQ2hpbGQoY2xvc2VTeW1iKTtcblx0XHRcdGNsb3NlRm5jKCk7XG5cdFx0fTtcblx0XHRjb25zdCBhZGRDbG9zZUZuYyA9ICgpID0+IHtcblx0XHRcdG1vZGFsQ2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0Y29uc3QgY3VycmVudEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuXHRcdFx0XHRcdFwiLm1vZGFsLWNvdW50cnktY29udGFpbmVyXCJcblx0XHRcdFx0KTtcblx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mYWNlLW1hc2tcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdHNldFRpbWVvdXQoc2V0SW52aXNpYmxlLCAxMDApO1xuXHRcdFx0XHRmdW5jdGlvbiBzZXRJbnZpc2libGUoKSB7XG5cdFx0XHRcdFx0Y3VycmVudEZvcm0uc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVZKC0xMjUlKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNldFRpbWVvdXQocmVtb3ZlTW9kYWwsIDc1MCk7XG5cdFx0XHRcdGZ1bmN0aW9uIHJlbW92ZU1vZGFsKCkge1xuXHRcdFx0XHRcdGN1cnJlbnRGb3JtLnN0eWxlLm9wYWNpdHkgPSAwO1xuXHRcdFx0XHRcdGN1cnJlbnRGb3JtLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdFx0XHRcdGN1cnJlbnRGb3JtLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGN1cnJlbnRGb3JtLnJlbW92ZSgpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdC8vIFJlbmRlciBzZWN0aW9ucyBvZiB0aGUgZm9ybS5cblx0XHRyZW5kZXJIZWFkaW5nKCk7XG5cdFx0cmVuZGVyQm9keSgpO1xuXHRcdHJlbmRlckNsb3NlQnRuKGFkZENsb3NlRm5jKTtcblxuXHRcdFttb2RhbEhlYWRlciwgbW9kYWxCb2R5LCBtb2RhbENsb3NlQnRuXS5mb3JFYWNoKChtb2RhbEVsZW0pID0+XG5cdFx0XHRtb2RhbENvbnRhaW5lci5hcHBlbmRDaGlsZChtb2RhbEVsZW0pXG5cdFx0KTtcblxuXHRcdHNldFRpbWVvdXQobWFrZVZpc2libGUsIDEwMCk7XG5cdFx0ZnVuY3Rpb24gbWFrZVZpc2libGUoKSB7XG5cdFx0XHQvLyBTZXQgc3R5bGluZyB0byB2aXNpYmxlIGZvciBhbmltYXRpb24gZmFkZSBpbiBlZmZlY3QuXG5cdFx0XHRtb2RhbENvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG5cdFx0XHRtb2RhbENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gMTtcblx0XHRcdG1vZGFsQ29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWSgwJSlcIjtcblx0XHR9XG5cblx0XHRjb25zdCBib2R5RG9jdW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcblx0XHRib2R5RG9jdW1lbnQuYXBwZW5kKG1vZGFsQ29udGFpbmVyKTtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZhY2UtbWFza1wiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyQ291bnRyeUZsYWcoY291bnRyeUNvZGUsIGNvdW50cnlOYW1lKSB7XG5cdFx0XHRjb25zdCBmbGFnID0gcmVuZGVyRWxlbWVudChcImltZ1wiLCBcImNvdW50cnktZmxhZ1wiKTtcblx0XHRcdGZsYWcuc2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIiwgXCJhbm9ueW1vdXNcIik7XG5cdFx0XHRmbGFnLnNyYyA9IGBodHRwczovL2NvdW50cnlmbGFnc2FwaS5jb20vcG5nLyR7Y291bnRyeUNvZGV9YDtcblx0XHRcdGZsYWcuYWx0ID0gYCR7Y291bnRyeU5hbWV9IGZsYWdgO1xuXHRcdFx0cmV0dXJuIGZsYWc7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZmlsdGVyUmVzdWx0cygpIHtcblx0XHRcdGxldCBpbnB1dCwgZmlsdGVyLCB1bCwgbGksIGEsIGksIHR4dFZhbHVlO1xuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGFsLWlucHV0LXNlYXJjaFwiKTtcblx0XHRcdGZpbHRlciA9IGlucHV0LnZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cdFx0XHR1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY291bnRyaWVzLWxpc3RcIik7XG5cdFx0XHRsaSA9IHVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlcIik7XG5cblx0XHRcdC8vIExvZ2ljIHRoYXQgZmlsdGVycyB0aGUgY291bnRyaWVzIGJhc2VkIG9uIGlucHV0LlxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxpLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGEgPSBsaVtpXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIilbMF07XG5cdFx0XHRcdHR4dFZhbHVlID0gYS50ZXh0Q29udGVudCB8fCBhLmlubmVyVGV4dDtcblx0XHRcdFx0aWYgKHR4dFZhbHVlLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpID4gLTEpIHtcblx0XHRcdFx0XHRsaVtpXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaVtpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gaGlnaGxpZ2h0Q3VyckNvdW50cnkoY291bnRyeU5hbWUpIHtcblx0XHQvLyBIaWdobGlnaHQgc2VsZWN0ZWQgY3VycmVudCBjb3VudHJ5IGluIHRoZSBsaXN0IG9mIGNvdW50cmllcyB3aGVuXG5cdFx0Ly8gbW9kYWwgaXMgb3BlbmVkLiBBZGQgYSB0aWNrIGljb24gc2ltdWx0YW5lb3VzbHlcblxuXHRcdGxldCB1bCwgbGksIGksIGEsIHR4dFZhbHVlO1xuXHRcdHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb3VudHJpZXMtbGlzdFwiKTtcblx0XHRsaSA9IHVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlcIik7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGxpLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhID0gbGlbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWzBdO1xuXHRcdFx0dHh0VmFsdWUgPSBhLnRleHRDb250ZW50IHx8IGEuaW5uZXJUZXh0O1xuXHRcdFx0aWYgKHR4dFZhbHVlID09PSBjb3VudHJ5TmFtZSkge1xuXHRcdFx0XHRsaVtpXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYmEoMjUsIDE1MCwgMTUwLCAwLjUpXCI7XG5cdFx0XHRcdGxpW2ldLnN0eWxlLnRyYW5zZm9ybSA9IFwic2NhbGUoMS4wMjUpXCI7XG5cdFx0XHRcdGNvbnN0IHRpY2tJY29uID0gcmVuZGVyRWxlbWVudChcImlcIiwgXCJmYVwiKTtcblx0XHRcdFx0dGlja0ljb24uY2xhc3NMaXN0LmFkZChcImZhLWNoZWNrXCIpO1xuXHRcdFx0XHRsaVtpXS5hcHBlbmQodGlja0ljb24pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4ge1xuXHRcdHNlY3Rpb24sXG5cdFx0YWRkVG9TZWN0aW9uLFxuXHRcdGRyYXdBbGwsXG5cdFx0ZHJhd0ludHJvLFxuXHRcdGRyYXdTdWJJbmZvcyxcblx0XHRkcmF3U3VtbWFyeUhlYWRpbmcsXG5cdFx0ZHJhd1N1bW1hcnksXG5cdFx0ZHJhd1Byb3ZpZGVycyxcblx0XHRkcmF3UmV2aWV3cyxcblx0XHRkcmF3VHJhaWxlcixcblx0XHRkcmF3UmVjcyxcblx0fTtcbn07XG5cbmV4cG9ydCB7IGRyYXdTZWN0aW9uIH07XG4iLCJpbXBvcnQgY29sbGVjdFNlYXJjaFF1ZXJ5IGZyb20gXCIuL3NlYXJjaFwiO1xuaW1wb3J0IHsgZmV0Y2hJZHMgfSBmcm9tIFwiLi4vYXBpRnVuY3Rpb25zL2ZldGNoSWRcIjtcbmltcG9ydCAqIGFzIG1vdmllIGZyb20gXCIuLi9hcGlGdW5jdGlvbnMvZmV0Y2hNb3ZpZUluZm9cIjtcbmltcG9ydCB7IGRyYXdTZWN0aW9uIH0gZnJvbSBcIi4vZHJhd1NlY3Rpb25cIjtcblxuYXN5bmMgZnVuY3Rpb24gZHJhd1NlY3Rpb25zKHRpdGxlKSB7XG5cdGNvbnN0IGlkcyA9IGF3YWl0IGZldGNoSWRzKHRpdGxlKTtcblx0Y29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi1jb250YWluZXJcIik7XG5cdHNob3dMb2FkZXIoKTtcblxuXHRsZXQgc2VjdGlvbnMgPSBbXTtcblxuXHQvLyBNYWtlIGFuIGFyciB3LyBlbGVtcyBvZiBbaWQsIG1lZGlhXVxuXHRmb3IgKGxldCBpZCBpbiBpZHMpIHtcblx0XHRzZWN0aW9ucy5wdXNoKFtpZCwgaWRzW2lkXV0pO1xuXHR9XG5cblx0Y29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcblx0XHRlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG5cdFx0XHRpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcblx0XHRcdFx0ZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblx0Ly8gZHJhdyBhbGwgc2VjdGlvbnNcblx0c2VjdGlvbnMuZm9yRWFjaChhc3luYyAoc2VjdGlvbikgPT4ge1xuXHRcdGF3YWl0IHJlbmRlclNlY3Rpb24oc2VjdGlvblswXSwgc2VjdGlvblsxXSkudGhlbigoKSA9PiBoaWRlTG9hZGVyKCkpO1xuXG5cdFx0Ly8gRW5hYmxlIGFuaW1hdGlvbiBpZiBhbmltYXRpb24tY2hlY2sgY2hlY2tib3ggaXMgY2hlY2tlZC5cblx0XHRjb25zdCBhbmltYXRpb25DaGVjayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hlY2stYW5pbWF0aW9uXCIpO1xuXHRcdGlmIChhbmltYXRpb25DaGVjay5jaGVja2VkKSB7XG5cdFx0XHRjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpO1xuXHRcdFx0Wy4uLmVsZW1lbnRzXS5mb3JFYWNoKChlbCkgPT4ge1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuXHRcdFx0XHRvYnNlcnZlci5vYnNlcnZlKGVsKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dC1zZWFyY2hcIikudmFsdWUgPSB0aXRsZS5zcGxpdChcIitcIikuam9pbihcIiBcIik7XG5cblx0YXN5bmMgZnVuY3Rpb24gcmVuZGVyU2VjdGlvbihpZCwgbWVkaWEpIHtcblx0XHRjb25zdCBzZWN0aW9uID0gYXdhaXQgZHJhd1NlY3Rpb24oaWQsIG1lZGlhKTtcblxuXHRcdC8vIEFkZCB3cmFwcGVyIGRpdnMgZm9yIGxheW91dC5cblx0XHRjb25zdCBpbnRyb1N1YkluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGludHJvU3ViSW5mby5jbGFzc0xpc3QuYWRkKFwiaW50cm8tc3ViLWluZm9cIik7XG5cdFx0aW50cm9TdWJJbmZvLmFwcGVuZENoaWxkKHNlY3Rpb24uZHJhd0ludHJvKFwiMzAwXCIpKTtcblx0XHRpbnRyb1N1YkluZm8uYXBwZW5kQ2hpbGQoc2VjdGlvbi5kcmF3U3ViSW5mb3MoKSk7XG5cblx0XHRjb25zdCBzeW5vcHNpc1dhdGNoUHZkZXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRzeW5vcHNpc1dhdGNoUHZkZXJzLmNsYXNzTGlzdC5hZGQoXCJzeW5vcHNpcy13YXRjaC1wcm92aWRlcnNcIik7XG5cdFx0c3lub3BzaXNXYXRjaFB2ZGVycy5hcHBlbmRDaGlsZChzZWN0aW9uLmRyYXdTdW1tYXJ5SGVhZGluZygpKTtcblx0XHRzeW5vcHNpc1dhdGNoUHZkZXJzLmFwcGVuZENoaWxkKHNlY3Rpb24uZHJhd1N1bW1hcnkoKSk7XG5cdFx0c3lub3BzaXNXYXRjaFB2ZGVycy5hcHBlbmRDaGlsZChzZWN0aW9uLmRyYXdQcm92aWRlcnMoKSk7XG5cblx0XHRjb25zdCByZWNIZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuXHRcdHJlY0hlYWRpbmcuY2xhc3NMaXN0LmFkZChcInJlYy1oZWFkaW5nXCIpO1xuXHRcdHJlY0hlYWRpbmcudGV4dENvbnRlbnQgPSBcIlJFQ09NTUVOREFUSU9OUzpcIjtcblxuXHRcdHNlY3Rpb24uYWRkVG9TZWN0aW9uKGludHJvU3ViSW5mbyk7XG5cdFx0c2VjdGlvbi5hZGRUb1NlY3Rpb24oc3lub3BzaXNXYXRjaFB2ZGVycyk7XG5cdFx0c2VjdGlvbi5hZGRUb1NlY3Rpb24oc2VjdGlvbi5kcmF3UmV2aWV3cygpKTtcblx0XHRzZWN0aW9uLmFkZFRvU2VjdGlvbihzZWN0aW9uLmRyYXdUcmFpbGVyKCkpO1xuXHRcdHNlY3Rpb24uYWRkVG9TZWN0aW9uKHJlY0hlYWRpbmcpO1xuXHRcdHNlY3Rpb24uYWRkVG9TZWN0aW9uKHNlY3Rpb24uZHJhd1JlY3MoKSk7XG5cdFx0bWFpbi5hcHBlbmRDaGlsZChzZWN0aW9uLnNlY3Rpb24pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsZWFyU2VjdGlvbnMoKSB7XG5cdGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4tY29udGFpbmVyXCIpO1xuXHRjb25zdCBsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRlclwiKTtcblx0Y29uc3Qgc2VjdGlvbnMgPSBtYWluLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzZWN0aW9uJyk7XG5cdFsuLi5zZWN0aW9uc10uZm9yRWFjaChzZWN0ID0+IHNlY3QucmVtb3ZlKCkpO1xufVxuXG5mdW5jdGlvbiBzaG93TG9hZGVyKCkge1xuXHRjb25zdCBsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRlclwiKTtcblx0bG9hZGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbn1cbmZ1bmN0aW9uIGhpZGVMb2FkZXIoKSB7XG5cdGNvbnN0IGxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGVyXCIpO1xuXG5cdGxvYWRlci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblxufVxuXG5leHBvcnQgeyBkcmF3U2VjdGlvbnMsIGNsZWFyU2VjdGlvbnMgfTtcbiIsIi8vIEFkZCBjbGljayBldmVudCBsaXN0ZW5lciBmb3IgY2hlY2tib3ggdGhhdCBhdXRvbWF0aWNhbGx5IGRpc2FibGVzIGFuaW1hdGlvblxuLy8gYW5kIHJlbG9hZHMgdGhlIHBhZ2UuXG5jb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuXHRlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG5cdFx0aWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG5cdFx0XHRlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmFkZChcInNob3dcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFRvZ2dsZUFuaW1hdGlvbkZuYygpIHtcblx0Y29uc3QgYW5pbWF0aW9uQ2hlY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoZWNrLWFuaW1hdGlvblwiKTtcblx0YW5pbWF0aW9uQ2hlY2suYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJkaXZcIik7XG5cdFx0aWYgKGFuaW1hdGlvbkNoZWNrLmNoZWNrZWQpIHtcblx0XHRcdGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG5cdFx0XHRcdG9ic2VydmVyLm9ic2VydmUoZWwpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG5cdFx0XHRcdG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG59XG4iLCJpbXBvcnQgeyBkcmF3U2VjdGlvbnMsIGNsZWFyU2VjdGlvbnMgfSBmcm9tIFwiLi4vRE9NRnVuY3Rpb25zL2RyYXdTZWN0aW9uc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBhZGRTdWJtaXRTZWFyY2hGbmMoKSB7XG5cdGNvbnN0IHNlYXJjaEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VhcmNoLXF1ZXJ5XCIpO1xuXHRzZWFyY2hCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGNvbnN0IHF1ZXJ5ID0gaW50ZXJwcmV0VG9RdWVyeShcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXQtc2VhcmNoXCIpLnZhbHVlXG5cdFx0KTtcblx0XHRpZiAoIXF1ZXJ5KSB7XG5cdFx0XHRhbGVydChcIlBsZWFzZSBlbnRlciBhIHZhbGlkIG1vdmllL3R2IHNob3dcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRpdGxlIHBhZ2VzIGVsZW1zIGlmIGFueS5cblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlLXBhZ2VcIilcblx0XHRcdD8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZS1wYWdlXCIpLnJlbW92ZSgpXG5cdFx0XHQ6IFwiXCI7XG5cdFx0XG5cdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnRyby1jb250YWluZXIyXCIpXG5cdFx0XHQ/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW50cm8tY29udGFpbmVyMlwiKS5yZW1vdmUoKVxuXHRcdFx0OiBcIlwiO1xuXG5cdFx0Y2xlYXJTZWN0aW9ucygpO1xuXHRcdGF3YWl0IGRyYXdTZWN0aW9ucyhxdWVyeSk7XG5cblx0fSk7XG59XG5cbmZ1bmN0aW9uIGludGVycHJldFRvUXVlcnkobmFtZSkge1xuXHRyZXR1cm4gbmFtZS5zcGxpdChcIiBcIikuam9pbihcIitcIik7XG59XG4iLCJpbXBvcnQgeyBkcmF3U2VjdGlvbnMgfSBmcm9tIFwiLi9qcy9ET01GdW5jdGlvbnMvZHJhd1NlY3Rpb25zXCI7XG5pbXBvcnQgYWRkVG9nZ2xlQW5pbWF0aW9uRm5jIGZyb20gXCIuL2pzL1VJL2NoZWNrQW5pbWF0aW9uXCI7XG5pbXBvcnQgYWRkU3VibWl0U2VhcmNoRm5jIGZyb20gXCIuL2pzL1VJL3N1Ym1pdFNlYXJjaFwiO1xuXG5pbml0aWFsaXNlUGFnZSgpO1xuZHJhd1NlY3Rpb25zKFwiR2FtZSBPZiBUaHJvbmVzXCIpO1xuXG5mdW5jdGlvbiBpbml0aWFsaXNlUGFnZSgpIHtcbiAgICBhZGRTdWJtaXRTZWFyY2hGbmMoKTtcbiAgICBhZGRUb2dnbGVBbmltYXRpb25GbmMoKTtcbn1cblxuXG5cbiJdLCJuYW1lcyI6WyJBUElfS0VZIiwiYXN5bmMiLCJmZXRjaE1vdmllRGV0YWlscyIsIm1vdmllX2lkIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1vZGUiLCJvcmlnaW5hbF90aXRsZSIsIm92ZXJ2aWV3IiwidGFnbGluZSIsInBvcHVsYXJpdHkiLCJ2b3RlX2F2ZXJhZ2UiLCJ2b3RlX2NvdW50IiwiZ2VucmVzIiwidmlkZW8iLCJydW50aW1lIiwicG9zdGVyX3BhdGgiLCJiYWNrZHJvcF9wYXRoIiwicmVsZWFzZV9kYXRlIiwianNvbiIsIm1OYW1lIiwic3VtbWFyeSIsIm1hcCIsImdlbnJlIiwibmFtZSIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJmZXRjaE1vdmllUmVjY29zIiwib2siLCJFcnJvciIsInJlc3VsdHMiLCJzbGljZSIsIm1vdmllIiwiaWQiLCJmZXRjaE1vdmllUHJvdmlkZXJzIiwicHJvdmlkZXJzQnlDb3VudHJ5IiwiZGF0YSIsImNvdW50cnlDb2RlIiwiY291bnRyeSIsImNvZGUiLCJJbnRsIiwiRGlzcGxheU5hbWVzIiwidHlwZSIsIm9mIiwic3RyZWFtIiwicmVudCIsImJ1eSIsInNvcnRQcm92aWRlcnMiLCJzZXJ2aWNlcyIsImNvbGxlY3Rpb24iLCJmb3JFYWNoIiwic2VydmljZSIsInByb3ZpZGVySW5mbyIsInByb3ZpZGVyX25hbWUiLCJwcm92aWRlcl9sb2dvX3BhdGgiLCJsb2dvX3BhdGgiLCJwdXNoIiwiZmxhdHJhdGUiLCJlcnJvcm9yIiwiZmV0Y2hNb3ZpZVRyYWlsZXIiLCJ0cmFpbGVycyIsImZpbHRlciIsImxlbmd0aCIsIm1vdmllVHJhaWxlciIsImZpbmQiLCJvZmZpY2lhbCIsInROYW1lIiwia2V5Iiwic2l0ZSIsImxhbmciLCJpc29fNjM5XzEiLCJmZXRjaE1vdmllUmV2aWV3cyIsInJldmlld3MiLCJyZXZpZXciLCJhdXRob3IiLCJyYXRpbmciLCJhdXRob3JfZGV0YWlscyIsInBpY19wYXRoIiwiYXZhdGFyX3BhdGgiLCJjb250ZW50IiwidXJsIiwibGFzdF91cGRhdGVkIiwidXBkYXRlZF9hdCIsImZldGNoVHZEZXRhaWxzIiwidHZfaWQiLCJyZWR1Y2UiLCJhY2MiLCJ2YWwiLCJvcmlnaW5hbF9uYW1lIiwibGFuZ3VhZ2UiLCJvcmlnaW5hbF9sYW5ndWFnZSIsImVwaXNvZGVfcnVuX3RpbWUiLCJvcmlnaW5fY291bnRyeSIsInN0YXR1cyIsInNlYXNvbnMiLCJudW1iZXJfb2Zfc2Vhc29ucyIsImZpcnN0X2Fpcl9kYXRlIiwibGFzdF9haXJfZGF0ZSIsImZldGNoVHZSZWNjb3MiLCJyZWNUdnMiLCJ0diIsImZldGNoVHZQcm92aWRlcnMiLCJmZXRjaFR2VHJhaWxlciIsInR2VHJhaWxlciIsImZldGNoVHZSZXZpZXdzIiwiZHJhd1NlY3Rpb24iLCJtZWRpYSIsInNlY3Rpb24iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkZXRhaWxzIiwiZ2V0SW5mbyIsInJlY3MiLCJwcm92aWRlcnMiLCJ0cmFpbGVyIiwiYWRkVG9TZWN0aW9uIiwiaW5mbyIsImFwcGVuZENoaWxkIiwicmVuZGVyRWxlbWVudCIsInRhZyIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsImNsYXNzTGlzdCIsImFkZCIsIm1vdmllRm5jIiwidHZGbmMiLCJkcmF3SW50cm8iLCJpbWdTaXplIiwiaW50cm9Db250YWluZXIiLCJ0aXRsZSIsInRleHRDb250ZW50IiwiY3JlYXRlVGl0bGUiLCJ0YWdQYXJhIiwid3JpdGVUYWdsaW5lIiwiaW1nIiwicG9zdGVyIiwiYmFzZUltZ1VybCIsImltZ1BhdGgiLCJzcmMiLCJhbHQiLCJzZXRBdHRyaWJ1dGUiLCJyZW5kZXJJbWciLCJkcmF3UmVjIiwicmVjIiwicmVjQ29udGFpbmVyIiwicmVjUG9zdGVyIiwic3ViSW5mbyIsInJlY05hbWUiLCJyZWNEYXRlIiwidm90ZUNvdW50Iiwidm90ZUF2ZyIsInJlbmRlckluZm8iLCJyZWNMaW5rIiwibWVkaWFUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRyYXdBbGwiLCJkcmF3U3ViSW5mb3MiLCJkYXRlIiwibGFzdEFpcmVkIiwiY3JlYXRlU3ViSW5mbyIsInNwbGl0IiwicmV2ZXJzZSIsImpvaW4iLCJtaW5zIiwiaG91cnMiLCJySG91cnMiLCJNYXRoIiwiZmxvb3IiLCJtaW51dGVzIiwicm91bmQiLCJjb252ZXJ0TWluVG9IciIsImNhdGVnb3J5IiwiY2F0ZWdvcnlOYW1lIiwiY2F0ZWdvcnlJbmZvIiwiZHJhd1N1bW1hcnlIZWFkaW5nIiwiaGVhZGluZyIsImRyYXdTdW1tYXJ5IiwicGFyYSIsImRyYXdQcm92aWRlcnMiLCJhdmFpbFByb3ZpZGVycyIsInByb3ZpZGVyQ29udGFpbmVyIiwiY291bnRyeUJ0biIsImhvdXNlQ29udGFpbmVyIiwiZWxlbSIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsImZsYWciLCJkcmF3UHJvdmlkZXIiLCJmaXJzdFByb3ZpZGVyIiwiZXJyIiwibG9nIiwibG9zdEdpZiIsInN0eWxlIiwiZGlzcGxheSIsImp1c3RpZnlDb250ZW50IiwiZG93bkFycm93IiwiY3VyckNvdW50cnlOYW1lIiwicHJvdmlkZXJDb3VudHJpZXMiLCJjdXJyQ291bnRyeUNvZGUiLCJjb3VudHJpZXMiLCJtb2RhbENvbnRhaW5lciIsIm1vZGFsSGVhZGVyIiwibW9kYWxCb2R5IiwibW9kYWxDdXJyZW50Q291bnRyeSIsIm1vZGFsSW5wdXRTZWFyY2giLCJtb2RhbExpc3RDb3VudHJpZXMiLCJtb2RhbENsb3NlQnRuIiwicmVuZGVyQ291bnRyeUZsYWciLCJjb3VudHJ5TmFtZSIsImZpbHRlclJlc3VsdHMiLCJpbnB1dCIsInVsIiwibGkiLCJhIiwiaSIsInR4dFZhbHVlIiwiZ2V0RWxlbWVudEJ5SWQiLCJ2YWx1ZSIsInRvVXBwZXJDYXNlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbm5lclRleHQiLCJpbmRleE9mIiwiY3VyckNvdW50cnkiLCJzZWFyY2hMYWJlbCIsInNlYXJjaEF0dHJpYnV0ZXMiLCJwbGFjZWhvbGRlciIsInJvbGUiLCJjdXJyQ291bnRyeUZsYWciLCJodG1sRm9yIiwiZm9ybUVsZW0iLCJyZW5kZXJIZWFkaW5nIiwiY291bnRyeUNvbnRhaW5lciIsImNvdW50cnlGbGFnIiwiY291bnRyeUVsZW0iLCJyZW5kZXJCb2R5IiwiY2xvc2VGbmMiLCJjbG9zZVN5bWIiLCJyZW5kZXJDbG9zZUJ0biIsImN1cnJlbnRGb3JtIiwicXVlcnlTZWxlY3RvciIsInNldFRpbWVvdXQiLCJ0cmFuc2Zvcm0iLCJvcGFjaXR5IiwidmlzaWJpbGl0eSIsInJlbW92ZSIsIm1vZGFsRWxlbSIsImFwcGVuZCIsInJlbmRlckNvdW50cmllc01vZGFsIiwiYmFja2dyb3VuZENvbG9yIiwidGlja0ljb24iLCJoaWdobGlnaHRDdXJyQ291bnRyeSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsYXN0Q2hpbGQiLCJzZWxlY3RlZENvdW50cnkiLCJpbm5lckhUTUwiLCJzdHJlYW1JbmZvIiwiYnV5SW5mbyIsInJlbnRJbmZvIiwic2VydmljZU5hbWVzIiwiaWR4Iiwic2VydmljZUNvbnRhaW5lciIsInNlcnZpY2VOYW1lIiwic2VydmljZU5hbWVCb2xkIiwicHJvdmlkZXJTZXJ2aWNlQ29udGFpbmVyIiwicHJvdmlkZXIiLCJwcm92aWRlclNlcnZpY2UiLCJwcm92aWRlckltZyIsInByb3ZpZGVyTmFtZSIsImRyYXdSZXZpZXdzIiwicmV2aWV3Q29udGFpbmVyIiwiYWRkUmV2SW5mbyIsImluZm9Db250YWluZXIiLCJyZXZpZXdIZWFkaW5nIiwiYXV0aG9yUGljIiwicmVuZGVyUmV2aWV3SGVhZGluZyIsInJldmlld0NvbnRlbnQiLCJyZW5kZXJSZXZpZXdCb2R5IiwicmV2aWV3Rm9vdGVyIiwicmV2aWV3VXJsIiwicmV2aWV3VXBkYXRlZCIsImNvbmNhdCIsInJlbmRlclJldmlld0Zvb3RlciIsImRyYXdSZXZpZXciLCJkcmF3VHJhaWxlciIsInRyYWlsZXJDb250YWluZXIiLCJ0cmFpbGVySGVhZGluZyIsInRyYWlsZXJOYW1lIiwidHJhaWxlckxhbmd1YWdlIiwicmVuZGVyVHJhaWxlckhlYWRpbmciLCJ2aWRlb1dyYXBwZXIiLCJmcmFtZSIsImF0dHJpYnV0ZXMiLCJsb2FkaW5nIiwid2lkdGgiLCJoZWlnaHQiLCJmcmFtZWJvcmRlciIsImFsbG93IiwiYXR0ciIsImFkZFZpZGVvIiwiZHJhd1JlY3MiLCJyZWNzQ29udGFpbmVyIiwibm9uZU1zZyIsImRyYXdTZWN0aW9ucyIsImlkcyIsInF1ZXJ5IiwiaW50ZXJwcmV0VG9RdWVyeSIsInJlc3VsdCIsIm1lZGlhX3R5cGUiLCJzb3J0IiwicDEiLCJwMiIsImFsZXJ0IiwiZmV0Y2hJZHMiLCJtYWluIiwic2VjdGlvbnMiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJ0YXJnZXQiLCJpbnRyb1N1YkluZm8iLCJzeW5vcHNpc1dhdGNoUHZkZXJzIiwicmVjSGVhZGluZyIsInJlbmRlclNlY3Rpb24iLCJ0aGVuIiwiY2hlY2tlZCIsImVsIiwib2JzZXJ2ZSIsImNsZWFyU2VjdGlvbnMiLCJzZWN0IiwiYWRkU3VibWl0U2VhcmNoRm5jIiwiYW5pbWF0aW9uQ2hlY2siLCJlbGVtZW50cyIsImRpc2Nvbm5lY3QiLCJhZGRUb2dnbGVBbmltYXRpb25GbmMiXSwic291cmNlUm9vdCI6IiJ9